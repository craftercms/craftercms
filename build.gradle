/*
 * Copyright (C) 2007-2022 Crafter Software Corporation. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id "de.undercouch.download" version "${undercouchDownloadVersion}"
}

apply plugin: "groovy"
apply plugin: 'de.undercouch.download'

project.version = "4.1.3" // craftercms version flag

apply from: "global-settings.gradle"
apply from: "commons.gradle"
apply from: "modules.gradle"
apply from: "environments.gradle"
apply from: "downloads.gradle"
apply from: "deploy.gradle"
apply from: "run.gradle"

task splash() {
	description 'Displays splash screen'
	doFirst {
		splash()
	}
}

task preFlightCheck() {
	description 'Checks dependencies'
	dependsOn = [ "splash" ]
	doFirst {
		if (JavaVersion.current() != project.targetCompatibility) {
    		throw new GradleException("The java version used ${JavaVersion.current()} is not the expected version ${project.targetCompatibility}.")
		}

		def command = "mvn -v"
		if (!command.execute()) {
			throw new GradleException("Maven ('mvn') not found, please make sure it is installed and accessible.")
		}

		command = "lsof -v"
		if (!command.execute()) {
			throw new GradleException("'lsof' command not found, please make sure it is installed and accessible.")
		}
	}
}

task download() {
	description 'Downloads dependencies if required.'
	dependsOn = [ "preFlightCheck" ]
	doFirst {
		def performDownload = true
		getDownloads().each { download ->
			performDownload = true
			def mongoDownload = ["mongodb", "mongosh", "mongodb-database-tools"].contains(download['name'])
			if (mongoDownload && (!(socialRequired || profileRequired))) {
				performDownload = false // Skip mongodb download
			}

			if (performDownload) {
				downloadArtifact(
						download['name'],
						download['url'],
						download['destinationFile'],
						download['checksumAlgorithm'],
						overwriteArtifact,
						download['verifyArtifact'] == false ? false : true /* verify artifact */,
						download['expand'].toBoolean(),
						download['expandFolder']
				)
			}
		}
	}
}

task clone() {
	description 'Clones the modules if required.'
	dependsOn = [ "download" ]
	doFirst {
		getAllModules().each { module ->
			cloneModule(module, gitUrl, shallowClone, gitBranch, gitRemote)
		}
	}
}

task selfUpdate() {
	description 'Updates the CrafterCMS parent project.'
	dependsOn = [ "clone" ]
	doFirst {
		execCommand(["git", "pull", gitRemote, gitBranch], "${projectDir}")
	}
}

task update() {
	description 'Updates the modules.'
	dependsOn = [ "clone" ]
	doFirst {
		getAllModules().each { module ->
			println "Updating $module"

			updateModule(module, gitRemote, gitBranch)
		}
	}
}

clean() {
	description 'Cleans the modules.'
	mustRunAfter update
	dependsOn = [ "clone", "installPomFiles" ]
	doFirst {
		getBuildModules().each { module ->
			println "Cleaning $module"

			cleanModule(module)
		}
	}
}

task installPomFiles() {
	description 'Installs the main POMs.'
	mustRunAfter selfUpdate
	dependsOn = [ "preFlightCheck" ]
	doFirst {
		println "Installing main POMs"
		installPoms()
	}
}

build() {
	description 'Builds the modules and prepares the binaries for deployment.'
	mustRunAfter clean
	dependsOn = [ "clone", "installPomFiles" ]
	doFirst {
		getBuildModules().each { module ->
			println "Building $module"

			buildModule(module, unitTest)
		}
	}
}

task buildBaseEnvs() {
	description 'Build base target environments.'
	dependsOn = [ "clone" ]
	doFirst {
		getEnvironments().each { environment ->
			println "Deploying the foundation of $environment"

			prepareEnvironment(environment, refreshEnv, overwriteChangedFiles, downloadGrapes, (socialRequired || profileRequired))
		}
	}
}

task buildBom() {
	description 'Builds the Software Bill of Materials (BOM).'
	dependsOn = [ "clone", "installPomFiles" ]
	doFirst {
		println "Build the Software Bill of Materials (BOM)"

		// TODO Switch to all modules
		getBuildModules().each { module ->
			println "Building BOM for $module"
			buildBom(module)
		}
		println "Aggregate BOMs"
		aggregateBoms("${projectDir}")
	}
}


task deploy() {
	description 'Deploys the module artifacts prepares the authoring/delivery environments.'
	mustRunAfter build
	dependsOn = [ "buildBaseEnvs" ]
	doFirst {
		getEnvironments().each { environment ->
			println "Deploying $environment"
			deployEnvironment(environment, getDeployModules(), overwriteChangedFiles, profileRequired, socialRequired)
		}
	}
}

task upgrade() {
	description 'Upgrades all modules and redeploys them'
	dependsOn = [ "installPomFiles", "update", "clean", "build", "deploy" ]
}

task start() {
	description 'Starts CrafterCMS'
	doFirst {
		getEnvironments().each { environment ->
			println "Starting $environment"

			def command = [ startCommand ]
			if (!startSearch)
				command += ["skipSearch"]
			if (startMongoDB)
				command += ["forceMongo"]
			runEnvironment(environment, command, profileRequired, socialRequired)
		}
	}
}

task stop() {
	description 'Stops CrafterCMS'
	doFirst {
		getEnvironments().each { environment ->
			println "Stopping $environment"

			def command = [ stopCommand ]
			if (!startSearch)
				command += ["skipSearch"]
			if (startMongoDB)
				command += ["forceMongo"]
			runEnvironment(environment, command, profileRequired, socialRequired)
		}
	}
}

task status() {
	description 'Reports CrafterCMS status'
	doFirst {
		getEnvironments().each { environment ->
			def command = [ statusCommand ]
			if (!startSearch)
				command += ["skipSearch"]
			if (startMongoDB)
				command += ["forceMongo"]
			runEnvironment(environment, command, profileRequired, socialRequired)
		}
	}
}

task bundle() {
	description 'Bundles the authoring/delivery environments into tarballs for distribution.'
	dependsOn = [ "deploy" ]
	doFirst {
		getEnvironments().each { environment ->
			println "Bundling $environment"
			bundleEnvironment(environment, bundlesDir)
		}
	}
}

gradle.buildFinished {
	project.buildDir.deleteDir()
}
