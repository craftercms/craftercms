import org.apache.commons.lang3.SystemUtils
import org.apache.commons.text.StringEscapeUtils

import java.nio.charset.Charset
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.apache.commons', name: 'commons-text', version: '1.1'
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
        classpath 'org.ajoberstar:grgit:1.1.0'

    }
}

plugins {
    id "de.undercouch.download" version "3.1.2"
}

project.version = "3.0.3-SNAPSHOT"

def isWin = System.getProperty('os.name').toLowerCase().contains('windows')

def commandLinePrefix = []
def startUpFile = "./startup.sh"
def shutDownFile = "./shutdown.sh"
if (isWin) {
    startUpFile = "startup.bat"
    shutDownFile = "shutdown.bat"
    commandLinePrefix = ["cmd", "/c"]
}

ext {

    /** Unzip Properties **/
    tomcatVersion = project.hasProperty("tomcat.version") ? project.property("tomcat.version") : "8.5.24"
    solrVersion = project.hasProperty("solr.version") ? project.property("solr.version") : "6.4.1"
    downloadDir = project.hasProperty("downloadDir") ? project.property("downloadDir") : "./downloads/"
    /** Environment Building properties **/
    authEnv = project.hasProperty("authoring.root") ? project.property("authoring.root") : "./crafter-authoring/"
    deliveryEnv = project.hasProperty("delivery.root") ? project.property("delivery.root") : "./crafter-delivery/"
    includeProfile = project.hasProperty("crafter.profile") ? project.property("crafter.profile") : false
    includeSocial = project.hasProperty("crafter.social") ? project.property("crafter.social") : false

    /** Social Need Profile **/
    if (includeSocial) {
        includeProfile = true
    }


    if (project.hasProperty("debug")) {
        startUpFile = "./debug.sh"
        if (isWin) {
            startUpFile = "debug.bat"
        }
    }

    //Authoring
    authTomcatPort = project.hasProperty("authoring.tomcat.http.port") ? project.property("authoring.tomcat.http.port") : 8080
    authTomcatShutdownPort = project.hasProperty("authoring.tomcat.shutdown.port") ? project.property("authoring.tomcat.shutdown.port") : 8005
    authTomcatAJPPort = project.hasProperty("authoring.tomcat.ajp.port") ? project.property("authoring.tomcat.ajp.port") : 8009
    authTomcatSSLPort = project.hasProperty("authoring.tomcat.https.port") ? project.property("authoring.tomcat.https.port") : 8443
    authTomcatDebug = project.hasProperty("authoring.tomcat.debug.port") ? project.property("authoring.tomcat.debug.port") : 8000
    authMongoDBPort = project.hasProperty("authoring.mongo.port") ? project.property("authoring.mongo.port") : 27020
    authSolrPort = project.hasProperty("authoring.solr.port") ? project.property("authoring.solr.port") : 8694
    authSolrDebugPort = project.hasProperty("authoring.solr.debug.port") ? project.property("authoring.solr.debug.port") : 5005
    authSMTPPort = project.hasProperty("authoring.studio.smtp.port") ? project.property("authoring.studio.smtp.port") : 25
    authMariaDbPort = project.hasProperty("authoring.mariadb.port") ? project.property("authoring.mariadb.port") : 33306

    authDeployerPort = project.hasProperty("authoring.deployer.port") ? project.property("authoring.deployer.port") : 9191
    authDeployerDebugPort = project.hasProperty("authoring.deployer.debug.port") ? project.property("authoring.deployer.debug.port") : 5000
    authDeploymentDir = project.hasProperty("authoring.deployment.dir") ? project.property("authoring.deployment.dir") : "data/repos/sites"

    // Delivery
    deliverySolrPort = project.hasProperty("delivery.solr.port") ? project.property("delivery.solr.port") : 8695
    deliverySolrDebugPort = project.hasProperty("delivery.solr.debug.port") ? project.property("delivery.solr.debug.port") : 5006

    deliveryDeployerPort = project.hasProperty("delivery.deployer.port") ? project.property("delivery.deployer.port") : 9192
    deliveryDeployerDebugPort = project.hasProperty("delivery.deployer.debug.port") ? project.property("delivery.deployer.debug.port") : 5001
    deliveryDeploymentDir = project.hasProperty("delivery.deployment.dir") ? project.property("delivery.deployment.dir") : "data/repos/sites"

    deliveryTomcatPort = project.hasProperty("delivery.tomcat.http.port") ? project.property("delivery.tomcat.http.port") : 9080
    deliveryTomcatShutdownPort = project.hasProperty("delivery.tomcat.shutdown.port") ? project.property("delivery.tomcat.shutdown.port") : 9005
    deliveryTomcatAJPPort = project.hasProperty("delivery.tomcat.ajp.port") ? project.property("delivery.tomcat.ajp.port") : 9009
    deliveryTomcatSSLPort = project.hasProperty("delivery.tomcat.https.port") ? project.property("delivery.tomcat.https.port") : 9443
    deliveryTomcatDebugPort = project.hasProperty("delivery.tomcat.debug.port") ? project.property("delivery.tomcat.debug.port") : 9000
    deliveryMongoDBPort = project.hasProperty("delivery.mongodb.port") ? project.property("delivery.mongodb.port") : 28020

    /** Git properties **/
    gitURLTemplate = project.hasProperty("crafter.git.url") ? project.property("crafter.git.url") : "https://github.com/craftercms/"
    gitSourceBranch = project.hasProperty("crafter.git.branch") ? project.property("crafter.git.branch") : "develop"
    gitRepo = project.hasProperty("crafter.git.remote") ? project.property("crafter.git.remote") : "origin"
    shallowClone = project.hasProperty("crafter.git.shallowClone") ? project.property("crafter.git.shallowClone") : false
    studioUIFromRepo = project.hasProperty("crafter.ui.repo") ? project.property("crafter.ui.repo") : false
    forceDeploy = project.hasProperty("forceDeploy") ? project.property("forceDeploy") : false
    keepBin = project.hasProperty("keepBin") ? project.property("keepBin") : false

    testingPlatform = project.hasProperty("crafter.testing.platform") ? project.property("crafter.testing.platform") : System.properties['os.name'].toString().toLowerCase().replaceAll(" ", "-")
    chromeDriverVersion = project.hasProperty("crafter.testing.chrome") ? project.property("crafter.testing.chrome") : 2.33
    browserToTest = project.hasProperty("crafter.testing.browser") ? project.property("crafter.testing.browser") : "chrome"
    testArtifacts = project.hasProperty("crafter.unittest") ? project.property("crafter.unittest") : false

    testingSuites = project.hasProperty("crafter.testing.suites") ? project.property("crafter.testing.suites") :
            "src/test/resources/testng.xml,src/test/resources/testngcomplexscenarios.xml,src/test/resources/testngAPI.xml" +
                    ",src/test/resources/testngSanityTest.xml"

    startMongodb = project.hasProperty("startMongodb") ? project.property("startMongodb") : false // Does not really.
    silentBuild = project.hasProperty("crafter.build.silent") ? project.property("crafter.build.silent") : false
    typeOfBundle = project.hasProperty("crafter.bundle.archive") ? project.property("crafter.bundle.archive") : "both"

    /** Cloneable Artifacts **/
    VALID_MODULES = ["commons", "core", "search", "profile", "engine", "deployer", "studio", "social", "studio-ui", "test-suite"]

    /** Deployable Artifacts **/
    VALID_DEPLOYABLE_MODULES = [
            "search"  : "./src/search/crafter-search-server/target/crafter-search.war",
            "profile" : "./src/profile/server/target/crafter-profile.war",
            "engine"  : "./src/engine/target/ROOT.war",
            "deployer": "./src/deployer/target/crafter-deployer.jar",
            "studio"  : "./src/studio/target/studio.war",
            "social"  : "./src/social/server/target/crafter-social.war"]
    WINDOWS_EDGE_DRIVER_URL = [
            "15063": "https://download.microsoft.com/download/3/4/2/342316D7-EBE0-4F10-ABA2-AE8E0CDF36DD/MicrosoftWebDriver.exe",
            "14393": "https://download.microsoft.com/download/3/2/D/32D3E464-F2EF-490F-841B-05D53C848D15/MicrosoftWebDriver.exe",
            "10586": "https://download.microsoft.com/download/C/0/7/C07EBF21-5305-4EC8-83B1-A6FCC8F93F45/MicrosoftWebDriver.msi",
            "10240": "https://download.microsoft.com/download/8/D/0/8D0D08CF-790D-4586-B726-C6469A9ED49C/MicrosoftWebDriver.msi"
    ]

    git = org.ajoberstar.grgit.Grgit.open(dir: ".")
    gitRevisionId = git.head().id.substring(0, 6)
}

apply from: "downloads.gradle"
apply from: "environments.gradle"


def deliveryDeps = []
def cleanDeps = []
def buildDeps = []
def initDeps = []
def updateDeps = []
def startDeps = []
def stopDeps = []
def statusDeps = []
def preTestDeps = browserToTest.equalsIgnoreCase("chrome") ? [downloadChromeDriver] : [downloadEdgeDriver]
def bundleDeps = []
def envs = []
def envDepends = []

if (getEnv().equalsIgnoreCase("all")) {
    envs = ["authoring", "delivery"]
    envDepends = [authoringEnvironment, deliveryEnvironment]
} else {
    envs = [getEnv()]
    envDepends = [tasks.findByName("${getEnv()}Environment")]
}

/** Some blackmagic here and there creates module_build tasks **/
def buildModules=[]
def deployModules = [:]
if(project.hasProperty("moduleName")){
    buildModules = project.property("moduleName").toLowerCase().split(",")
    buildModules.each {
        deployModules.put(it,VALID_DEPLOYABLE_MODULES[it])
    }
}else{
    buildModules = VALID_MODULES
    deployModules = VALID_DEPLOYABLE_MODULES
}

buildModules.each { module ->

    // Creates the Clean Task
    if (!tasks.findByPath("${module}_clean")) {
        task "${module}_clean" doLast({
            def array = commandLinePrefix + ["mvn", "clean"]
            executeProcess(array, "./src/${module}".toString())
        })
    } else {
        logger.debug("Task ${module}_build already exists")
    }

    // Creates the Build Tasks
    if (!tasks.findByPath("${module}_build") && !module.equalsIgnoreCase("test-suite")) {
        task "${module}_build" doLast({
            def actualCommandLinePost = [];
            if (!testArtifacts) {
                actualCommandLinePost.add("-Dmaven.test.skip=true")
            }
            if (module.equalsIgnoreCase("search")) {
                actualCommandLinePost.add("-pl")
                actualCommandLinePost.add("!crafter-search-itest")
            } else if (module.equalsIgnoreCase("profile")) {
                actualCommandLinePost.add("-pl")
                if (!includeProfile) {
                    actualCommandLinePost.add("!admin-console,!integration-tests,!server")
                } else {
                    actualCommandLinePost.add("!integration-tests")
                }
            }
            if (module.equalsIgnoreCase("studio") && !studioUIFromRepo) {
                actualCommandLinePost.add("-Dstudio.ui.path=../studio-ui/".toString())
                actualCommandLinePost.add("-Dexec.skip=true")
            }
            def array = commandLinePrefix + ["mvn", "install"] + actualCommandLinePost
            executeProcess(array, "./src/${module}".toString())
        })
        // Create init tasks
        task "${module}_init" doLast {
            def finalUrl = "${gitURLTemplate}${module}.git".toString()
            def path = "src/${module}".toString()
            def gitCloneCmd = ["git", "clone"]
            if (shallowClone) {
                gitCloneCmd.add("--depth")
                gitCloneCmd.add("1")
            }
            def arry = commandLinePrefix + gitCloneCmd + ["-b", gitSourceBranch, finalUrl, path]
            if (file(path).exists()) {
                logger.lifecycle("Module ${module} has already been initialized, please use " +
                        "'update' to update it.")
            } else {
                logger.lifecycle "Cloning: ${module}, branch: ${gitSourceBranch}, url: ${finalUrl}"
                executeProcess(arry, ".")
            }
        }
        //Creates Update Tasks
        task "${module}_update" doLast {
            if (!file("./src/${module}").exists()) {
                throw new InvalidUserDataException("Module ${module} is not initialized. Please use 'update' to initialize it.")
            } else {
                def arry = commandLinePrefix + ["git", "pull", gitRepo, gitSourceBranch]
                executeProcess(arry, "./src/${module}".toString())
            }
        }

        def cleanTask = tasks.findByName("${module}_clean")
        cleanTask.description "Cleans ${module} module"
        cleanDeps.add(cleanTask)
        // Creates the Dependencies Array
        def buildTask = tasks.findByName("${module}_build")
        buildTask.description "Builds and installs locally ${module} module"
        buildDeps.add(buildTask)
        def initTask = tasks.findByName("${module}_init")
        initTask.description = "Clones from ${gitURLTemplate}${module} branch ${gitSourceBranch} the module ${module}"
        initDeps.add(initTask)
        def updateTask = tasks.findByName("${module}_update")
        updateTask.description "Updates from ${gitRepo} branch ${gitSourceBranch} the module ${module}"
        updateDeps.add(updateTask)

    } else {
        logger.debug("Task ${module}_build already exists")
    }
}


envs.each { env ->
// Creates the deploy tasks
    deployModules.keySet().each { module ->
        if (!(env.equalsIgnoreCase("delivery") && module.equalsIgnoreCase("studio"))) {
            if (!tasks.findByName("${module}_${env}_deploy")) {
                task "${module}_${env}_deploy" doLast({
                    def deployable = file(VALID_DEPLOYABLE_MODULES[module])
                    deployBinary(deployable, env)
                    if (module.equalsIgnoreCase("profile")) {
                        deployBinary(file("./src/profile/admin-console/target/crafter-profile-admin.war"), env)
                    } else if (module.equalsIgnoreCase("social")) {
                        deployBinary(file("./src/social/admin/target/crafter-social-admin.war"), env)
                    }
                })
                def deployTask = tasks.findByName("${module}_${env}_deploy")
                deployTask.description "Deploy ${module} in the ${env} enviroment"
                deliveryDeps.add(deployTask)
            } else {
                logger.debug("Task ${module}_deploy already exists")
            }
        }
    }
    /* Per Env tasks */
    if (!tasks.findByName("${env}_start")) {
        task "${env}_start" doLast({
            def extraStartupParams = []
            if (startMongodb) {
                extraStartupParams.add("forceMongo")
            }
            def path = env.equalsIgnoreCase("authoring") ? "${authEnv}" : "${deliveryEnv}"
            if (!file(path).exists()) {
                throw new InvalidUserDataException("The '${env}' enviroment is not deployed. Please run 'deploy -Penv=${env}' before 'start'.")
            }
            executeProcess(commandLinePrefix + [startUpFile] + extraStartupParams, "${path}/bin", true)
        })
    }
    if (!tasks.findByName("${env}_stop")) {
        task "${env}_stop" doLast({
            def extraStartupParams = []
            if (startMongodb) {
                extraStartupParams.add("forceMongo")
            }
            def path = env.equalsIgnoreCase("authoring") ? "${authEnv}" : "${deliveryEnv}"
            if (!file(path).exists()) {
                throw new InvalidUserDataException("The '${env}' enviroment is not deployed. Please run 'deploy -Penv=${env}' before 'start'.")
            }
            executeProcess(commandLinePrefix + [shutDownFile] + extraStartupParams, "${path}/bin", true)
        })
    }

    if (!tasks.findByName("${env}_status") && !isWin) {
        task "${env}_status" doLast({
            def extraStartupParams = []
            if (startMongodb) {
                extraStartupParams.add("forceMongo")
            }
            def path = env.equalsIgnoreCase("authoring") ? "${authEnv}" : "${deliveryEnv}"
            if (!file(path).exists()) {
                throw new InvalidUserDataException("The '${env}' enviroment is not deployed. Please run 'deploy -Penv=${env}' before 'start'.")
            }
            executeProcess(commandLinePrefix + ["./crafter.sh", "status"], "${path}/bin", true)
        })
    }


    if (!tasks.findByName("${env}_bundle_zip")) {
        task "${env}_bundle_zip"(type: Zip) {
            description "Bundles as a Zip file ${env} enviroment"
                def environmentPath = env.equalsIgnoreCase("authoring") ? "${authEnv}" : "${deliveryEnv}"
                from(environmentPath) {
                    into("crafter")
                }
                archiveName "crafter-cms-${env}.zip"
                fileMode null
                dirMode null
                includeEmptyDirs true
                metadataCharset "UTF-8"
                caseSensitive false
                destinationDir(file("bundles/"))
                zip64 true
        }
    }

    if (!tasks.findByName("${env}_bundle_tar")) {
        task "${env}_bundle_tar"(type: Tar) {
            description "Bundles as a Tar file ${env} enviroment"
                def environmentPath = env.equalsIgnoreCase("authoring") ? "${authEnv}" : "${deliveryEnv}"
                from(environmentPath) {
                    into("crafter")
                }
                archiveName "crafter-cms-${env}.tar.gz"
                fileMode null
                dirMode null
                includeEmptyDirs true
                caseSensitive false
                compression = Compression.GZIP
                destinationDir(file("bundles/"))
        }
    }

    switch (typeOfBundle.toLowerCase()){
        case "zip":
            bundleDeps.add(tasks.findByName("${env}_bundle_zip"))
            break;
        case "tar":
            bundleDeps.add(tasks.findByName("${env}_bundle_tar"))
            break;
        default:
            bundleDeps.add(tasks.findByName("${env}_bundle_zip"))
            bundleDeps.add(tasks.findByName("${env}_bundle_tar"))
            break;
    }
    statusDeps.add(tasks.findByName("${env}_status"))
    stopDeps.add(tasks.findByName("${env}_stop"))
    startDeps.add(tasks.findByName("${env}_start"))
}

/* Cleanup non buildable modules */
buildDeps.removeAll([tasks.findByName("studio-ui_build")] as Task[])
cleanDeps.removeAll([tasks.findByName("studio-ui_clean")] as Task[])

if (!includeSocial) {
    buildDeps.removeAll([tasks.findByName('social_build')] as Task[])
    deliveryDeps.removeIf({
        it.name.contains("social")
    })
}

if (!includeProfile) {
    deliveryDeps.removeIf({
        it.name.contains("profile")
    })
}



task clean() {
    //Dummy task Builds used as dependency of other tasks
    description "Clean all configured Crafter Modules"
}

task build() {
    description "Builds all configured Crafter Modules"
    //Dummy task Builds used as dependency of other tasks
}

task init(dependsOn: initDeps) {
    description "Clones all configured Crafter modules from ${gitURLTemplate} and branch ${gitSourceBranch}"
}

task update(dependsOn: updateDeps) {
    description "Update all configured Crafter modules from ${gitSourceBranch} and branch ${gitSourceBranch}"
}

task upgrade() {
    description "Delete all enviroment information (keeps the site data,db and indexes), update builds and deploy a new enviroment."
}
task deploy() {
    description "Deploys all configured Crafter Modules"
}
task bundle(dependsOn: bundleDeps) {
    description "Zips and Tars all Crafter enviroments."
}
task start(dependsOn: startDeps) {
    description "Starts configured Crafter enviroments.."

}
task stop(dependsOn: stopDeps) {
    description "Stops configured Crafter enviroments.."
}
task status(dependsOn: statusDeps) {
    description "Gets the status configured Crafter enviroments.."
}

task utils() {
    description "Builds and deploys Crafter Utililty tools jar file."
    doLast {
        def array = commandLinePrefix + ["mvn", "clean", "package"]
        executeProcess(array, "./utils/")
        envs.each { env ->
            def path = env.equalsIgnoreCase("authoring") ? "${authEnv}" : "${deliveryEnv}"
            copy {
                from "./utils/target/craftercms-utils.jar"
                into "${path}/bin"
            }
        }
    }
}

task preUpgrade {
    def enviroments = []
    doFirst {
        switch (getEnv()) {
            case "all":
                enviroments.addAll([new File("${authEnv}"), new File("${deliveryEnv}")])
                break
            case "authoring":
                enviroments.add(new File("${authEnv}"))
                break
            case "delivery":
                enviroments.add(new File("${deliveryEnv}"))
                break
            default:
                throw new InvalidUserDataException("'${env}' is not a valid environment, please use 'authoring' or 'delivery'.")
        }
    }

    doLast {
        enviroments.each { envFolder ->
            if (envFolder.exists()) {
                envFolder.eachFile { dir ->
                    if (!dir.getName().equalsIgnoreCase("data")) {
                        if (!dir.isFile()) {
                            dir.deleteDir()
                        } else {
                            dir.delete()
                        }
                    }
                }
            }
        }
    }
}



task preDeploy {
    doLast {
        if (getEnv().equalsIgnoreCase("all")) {
            checkOrCreateCheck("${authEnv}")
            checkOrCreateCheck("${deliveryEnv}")
        } else {
            def path = env.equalsIgnoreCase("authoring") ? "${authEnv}" : "${deliveryEnv}"
            checkOrCreateCheck(path)
        }
    }
}



task selfupdate {
    description "Updates the Crafter CMS project"
    doLast {
        def arry = commandLinePrefix + ["git", "pull", gitRepo, gitSourceBranch]
        executeProcess(arry, ".")
    }
}

task preTest(dependsOn: preTestDeps) {
    def repoFolder = file("${authEnv}/data/repos/sites")
    def driverPath = ""
    doFirst {
        switch (browserToTest.toString().toLowerCase()) {
            case "chrome":
                if (SystemUtils.IS_OS_WINDOWS) {
                    driverPath = file("./src/test-suite/bin/${browserToTest}-${testingPlatform}/chromedriver.exe")
                } else {
                    driverPath = file("./src/test-suite/bin/${browserToTest}-${testingPlatform}/chromedriver")
                }
                break;
            case "edge":
                driverPath = file("./src/test-suite/bin/${browserToTest}/MicrosoftWebDriver.exe")
                break
            default:
                driverPath = askForPath();
        }

        if (!file("./src/test-suite/test-properties.properties").exists()) {
            def properties = []
            properties.add("webBrowser=${browserToTest}")
            properties.add("baseUrl=http://localhost:8080/studio/#/login")
            properties.add("${browserToTest}.driver.path=${StringEscapeUtils.escapeJava(file(driverPath).absolutePath)}")
            Files.write(Paths.get("./src/test-suite/test-properties.properties"), properties, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)
        }

        // Exists, is a folder and has sites
        if (repoFolder.exists() && repoFolder.isDirectory() && (repoFolder.listFiles().length > 0)) {
            def dataFolderSuffix = "-${new Date().format("YYYYMMdd")}-${UUID.randomUUID().toString()}"

            logger.lifecycle("About to begin automatic testing suite")
            logger.lifecycle("Current Data folder will be move to data_${dataFolderSuffix}")
            logger.lifecycle("It will move it back when done ")
            sleep(5 * 1000)
            repoFolder.parentFile.parentFile.renameTo(repoFolder.parentFile.parentFile.absolutePath + dataFolderSuffix)
            repoFolder.parentFile.parentFile.mkdir()
            Files.write(Paths.get(repoFolder.parentFile.parentFile.absolutePath, "_btbk.txt"), [dataFolderSuffix], StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)
        }
    }
}


task postTest {
    def repoFolder = file("${authEnv}/data/repos/sites")
    def folderSuffixCacheFile = Paths.get(repoFolder.parentFile.parentFile.absolutePath, "_btbk.txt").toFile()
    if (folderSuffixCacheFile.exists()) {
        logger.lifecycle("Moving back pre-test data")
        logger.lifecycle("Test data was backup in the folder ${folderSuffixCacheFile.toString()}")
        logger.lifecycle("This folder can be safely remove if needed.")
        def dataFolderSufix = Files.readAllLines(folderSuffixCacheFile.toPath(), Charset.forName("UTF-8")).get(0)
        def backupedFolder = file(repoFolder.parentFile.parentFile.absolutePath + dataFolderSufix)
        if (backupedFolder.exists()) {
            repoFolder.parentFile.parentFile.renameTo(repoFolder.parentFile.parentFile.absolutePath +
                    "$dataFolderSufix-td")
            backupedFolder.renameTo(Paths.get(backupedFolder.parentFile.absolutePath, "data").toString())
        }
    }
}

task delay {
    doLast {
        sleep(30 * 1000)
    }
}

task test() {
    description "Tests Crafter CMS."
    doLast {
        def actualCommandLinePost = ["-Dfile=" + testingSuites]
        def array = commandLinePrefix + ["mvn", "clean", "install"] + actualCommandLinePost
        executeProcess(array, "./src/test-suite")
    }
}

/** Makes sure Depends are run in order. **/
dependsOnOrdered(clean, cleanDeps)
dependsOnOrdered(build, [clean] + buildDeps)
dependsOnOrdered(init, initDeps)
dependsOnOrdered(update, updateDeps)
dependsOnOrdered(deploy, [preDeploy, downloadTomcat, downloadSolr, utils] + envDepends + deliveryDeps)
dependsOnOrdered(upgrade, [update, preUpgrade, build, deploy])

// If delivery no test (for now)
if(!project.hasProperty("env") || (project.hasProperty("env") && !project.property("env").equalsIgnoreCase("delivery"))) {
    dependsOnOrdered(test, [preTest, authoring_start, delay])
    test.finalizedBy(authoring_stop)
    test.finalizedBy(postTest)
}

def deployBinary(deployable, env) {
    if (deployable.exists()) {
        def path = env.equals("authoring") ? authEnv : deliveryEnv
        path += deployable.absolutePath.endsWith(".jar") ? "bin/crafter-deployer/" : "bin/apache-tomcat/webapps/"
        path += deployable.name
        delete {
            delete path
            delete path.take(path.lastIndexOf('.'))
        }
        copy {
            from deployable.absolutePath
            into path.take(path.lastIndexOf('/'))
        }
    } else {
        logger.lifecycle "WARN: You haven't built ${module} module"
    }
}

def executeProcess(command, workingDir, printOutputUntilFinish = false) {
    ProcessBuilder pb = new ProcessBuilder(command)
    def processOutput = File.createTempFile("process", "out")
    pb.directory(new File(workingDir))
    pb.redirectOutput(processOutput)
    Process proc = pb.start();
    if (!silentBuild) {
        watchProcessOutput(proc, processOutput)
    }
    proc.waitFor()
    if (proc.exitValue() != 0) {
        throw new GradleException("${command} @ ${workingDir} return a  non-zero value (${proc.exitValue()})")
    }
}

// Poor's man tail (but get's the job done)
def watchProcessOutput(process, processOutputFile) {
    Thread.start {

        def reader = null
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            reader = Files.newBufferedReader(Paths.get(processOutputFile.path), Charset.forName("ISO-8859-1"))
        } else {
            reader = Files.newBufferedReader(Paths.get(processOutputFile.path), Charset.forName("UTF-8"))
        }
        while (process.alive) {
            def line = null
            while ((line = reader.readLine()) != null) {
                logger.lifecycle line
            }
        }
        processOutputFile.delete()
    }
}

def checkOrCreateCheck(path) {
    def ddir = file(path)
    if (!ddir.exists() || forceDeploy) {
        ddir.mkdir()
        def deployerDir = file("${path}/bin/crafter-deployer")
        deployerDir.mkdir()
    }
}

def askForPath() {
    def console = System.console();
    def inputPath = console.readLine("> Please enter path for selemiun driver of ${browserToTest} ")
    if (!file(inputPath).exists()) {
        console.logger.lifecycle("${inputPath} does not exist, please enter a new valid path");
        askForPath();
    }
    return inputPath
}

def getModule() {
    if (project.hasProperty("moduleName")) {
        def moduleName = project.property("moduleName")
        moduleName = moduleName.trim().toLowerCase()
        return moduleName.trim().isEmpty() ? "all" : moduleName
    } else {
        return "all"
    }
}

def getEnv() {
    if (project.hasProperty("env")) {
        def environmentName = project.property("env")
        environmentName = environmentName.trim().toLowerCase()
        return environmentName.trim().isEmpty() ? "all" : environmentName
    } else {
        return "all"
    }
}

// Run task in the right order.
void dependsOnOrdered(Task task, List others) {
    task.dependsOn(others)
    for (int i = 0; i < others.size() - 1; i++) {
        others.get(i + 1).mustRunAfter(others.get(i))
    }
}