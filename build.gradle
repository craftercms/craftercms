/*
 * Copyright (C) 2007-2020 Crafter Software Corporation. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import org.apache.commons.text.StringEscapeUtils
import org.apache.commons.io.input.Tailer
import org.apache.commons.io.input.TailerListenerAdapter

import java.nio.charset.Charset
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.apache.commons', name: 'commons-text', version: '1.1'
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
        classpath group: 'commons-io', name: 'commons-io', version: '2.6'
        classpath 'org.ajoberstar:grgit:1.1.0'
    }
}

plugins {
    id "de.undercouch.download" version "3.1.2"
}

project.version = "3.1.25-SNAPSHOT" // craftercms version flag

ext {
    commandLinePrefix = []
    startUpFile = project.hasProperty("debug") ? "./debug.sh" : "./startup.sh"
    shutDownFile = "./shutdown.sh"

    /** Subprocess Properties **/
    processLogFile = ".gradle.log"
    processTailReadDelay = 100
    processTailFinishDelay = 1000

    /** Download Properties **/
    groovyVersion = project.hasProperty("groovy.version") ? project.property("groovy.version") : "3.0.9"
    tomcatVersion = project.hasProperty("tomcat.version") ? project.property("tomcat.version") : "8.5.75"
    solrVersion = project.hasProperty("solr.version") ? project.property("solr.version") : "7.7.3"
    elasticsearchVersion = project.hasProperty("elasticsearch.version") ? project.property("elasticsearch.version") : "6.8.23"
    mariadb4jVersion = project.hasProperty("mariadb4j.version") ? project.property("mariadb4j.version") : "2.4.12.1"
    downloadDir = project.hasProperty("downloadDir") ? project.property("downloadDir") : "./downloads/"
    
    /** Environment Building properties **/
    authEnvDir = project.hasProperty("authoring.root") ? project.property("authoring.root") : "./crafter-authoring/"
    deliveryEnvDir = project.hasProperty("delivery.root") ? project.property("delivery.root") : "./crafter-delivery/"
    authProcessedResourcesDir = "./tmp/crafter-authoring"
    deliveryProcessedResourcesDir = "./tmp/crafter-delivery"
    includeProfile = project.hasProperty("crafter.profile") ? project.property("crafter.profile").toBoolean() : false
    includeSocial = project.hasProperty("crafter.social") ? project.property("crafter.social").toBoolean() : false

    /** Social needs Profile **/
    if (includeSocial) {
        includeProfile = true
    }

    // Authoring
    authTomcatPort = project.hasProperty("authoring.tomcat.http.port") ? project.property("authoring.tomcat.http.port").toInteger() : 8080
    authTomcatShutdownPort = project.hasProperty("authoring.tomcat.shutdown.port") ? project.property("authoring.tomcat.shutdown.port").toInteger() : 8005
    authTomcatAJPPort = project.hasProperty("authoring.tomcat.ajp.port") ? project.property("authoring.tomcat.ajp.port").toInteger() : 8009
    authTomcatSSLPort = project.hasProperty("authoring.tomcat.https.port") ? project.property("authoring.tomcat.https.port").toInteger() : 8443
    authTomcatDebugPort = project.hasProperty("authoring.tomcat.debug.port") ? project.property("authoring.tomcat.debug.port").toInteger() : 8000
    authMongoDBPort = project.hasProperty("authoring.mongo.port") ? project.property("authoring.mongo.port").toInteger() : 27020
    authSolrPort = project.hasProperty("authoring.solr.port") ? project.property("authoring.solr.port").toInteger() : 8694
    authSolrDebugPort = project.hasProperty("authoring.solr.debug.port") ? project.property("authoring.solr.debug.port").toInteger() : 5005
    authElasticsearchPort = project.hasProperty("authoring.elasticsearch.port") ? project.property("authoring.elasticsearch.port").toInteger() : 9201
    authSMTPPort = project.hasProperty("authoring.studio.smtp.port") ? project.property("authoring.studio.smtp.port").toInteger() : 25
    authMariaDbPort = project.hasProperty("authoring.mariadb.port") ? project.property("authoring.mariadb.port").toInteger() : 33306
    authDeployerPort = project.hasProperty("authoring.deployer.port") ? project.property("authoring.deployer.port").toInteger() : 9191
    authDeployerDebugPort = project.hasProperty("authoring.deployer.debug.port") ? project.property("authoring.deployer.debug.port").toInteger() : 5000
    authDeploymentDir = project.hasProperty("authoring.deployment.dir") ? project.property("authoring.deployment.dir") : "data/repos/sites"

    // Delivery
    deliverySolrPort = project.hasProperty("delivery.solr.port") ? project.property("delivery.solr.port").toInteger() : 8695
    deliverySolrDebugPort = project.hasProperty("delivery.solr.debug.port") ? project.property("delivery.solr.debug.port").toInteger() : 5006
    deliveryElasticsearchPort = project.hasProperty("delivery.elasticsearch.port") ? project.property("delivery.elasticsearch.port").toInteger() : 9202
    deliveryDeployerPort = project.hasProperty("delivery.deployer.port") ? project.property("delivery.deployer.port").toInteger() : 9192
    deliveryDeployerDebugPort = project.hasProperty("delivery.deployer.debug.port") ? project.property("delivery.deployer.debug.port").toInteger() : 5001
    deliveryDeploymentDir = project.hasProperty("delivery.deployment.dir") ? project.property("delivery.deployment.dir") : "data/repos/sites"
    deliveryTomcatPort = project.hasProperty("delivery.tomcat.http.port") ? project.property("delivery.tomcat.http.port").toInteger(): 9080
    deliveryTomcatShutdownPort = project.hasProperty("delivery.tomcat.shutdown.port") ? project.property("delivery.tomcat.shutdown.port").toInteger() : 9005
    deliveryTomcatAJPPort = project.hasProperty("delivery.tomcat.ajp.port") ? project.property("delivery.tomcat.ajp.port").toInteger() : 9009
    deliveryTomcatSSLPort = project.hasProperty("delivery.tomcat.https.port") ? project.property("delivery.tomcat.https.port").toInteger() : 9443
    deliveryTomcatDebugPort = project.hasProperty("delivery.tomcat.debug.port") ? project.property("delivery.tomcat.debug.port").toInteger() : 9000
    deliveryMongoDBPort = project.hasProperty("delivery.mongodb.port") ? project.property("delivery.mongodb.port").toInteger() : 28020
    deliverySMTPPort = project.hasProperty("delivery.studio.smtp.port") ? project.property("delivery.studio.smtp.port").toInteger() : 25

    /** Git properties **/
    gitURLTemplate = project.hasProperty("crafter.git.url") ? project.property("crafter.git.url") : "https://github.com/craftercms/"
    gitSourceBranch = project.hasProperty("crafter.git.branch") ? project.property("crafter.git.branch") : "support/3.1.x" // craftercms branch flag
    gitRepo = project.hasProperty("crafter.git.remote") ? project.property("crafter.git.remote") : "origin"
    shallowClone = project.hasProperty("crafter.git.shallowClone") ? project.property("crafter.git.shallowClone").toBoolean() : false
    studioUIFromRepo = project.hasProperty("crafter.ui.repo") ? project.property("crafter.ui.repo").toBoolean() : false
    
    /** Other **/
    overwriteConfig = project.hasProperty("overwriteConfig") ? project.property("overwriteConfig").toBoolean() : false
    backupAndReplaceConfig = project.hasProperty("backupAndReplaceConfig") ? project.property("backupAndReplaceConfig").toBoolean() : false
    
    /** Testing **/
    testArtifacts = project.hasProperty("crafter.unittest") ? project.property("crafter.unittest").toBoolean() : false
    
    startMongodb = project.hasProperty("startMongodb") ? project.property("startMongodb").toBoolean() : false // TODO:: cleanup
    withElasticsearch = project.hasProperty("withElasticsearch") ? project.property("withElasticsearch").toBoolean() : true // TODO:: cleanup
    withSolr = project.hasProperty("withSolr") ? project.property("withSolr").toBoolean() : false
    silentBuild = project.hasProperty("crafter.build.silent") ? project.property("crafter.build.silent").toBoolean() : false // TODO:: cleanup
    typeOfBundle = project.hasProperty("crafter.bundle.archive") ? project.property("crafter.bundle.archive") : "both" // TODO:: cleanup
   
    /** Cloneable Artifacts **/
    VALID_MODULES =
      ["commons", "core", "search", "profile", "engine", "deployer", "studio", "social", "studio-ui", "plugin-maker"]

    /** Deployable Artifacts **/
    VALID_DEPLOYABLE_MODULES = [
            "search"  : "./src/search/crafter-search-solr-server/target/crafter-search.war",
            "profile" : "./src/profile/server/target/crafter-profile.war",
            "engine"  : "./src/engine/target/ROOT.war",
            "deployer": "./src/deployer/target/crafter-deployer.jar",
            "studio"  : "./src/studio/target/studio.war",
            "social"  : "./src/social/server/target/crafter-social.war"]

    git = org.ajoberstar.grgit.Grgit.open(dir: ".")
    gitRevisionId = git.head().id.substring(0, 6)
}

apply from: "downloads.gradle"
apply from: "environments.gradle"

def deployDepends = []
def cleanDeps = []
def buildDeps = []
def initDeps = []
def updateDeps = []
def startDeps = []
def stopDeps = []
def statusDeps = []
def bundleDeps = []
def envs = []
def envDepends = []

if (getEnv().equalsIgnoreCase("all")) {
    envs = ["authoring", "delivery"]
    envDepends = [authoringEnvironment, deliveryEnvironment]
} else {
    envs = [getEnv()]
    envDepends = [tasks.findByName("${getEnv()}Environment")]
}

/** Create module_build tasks **/
def buildModules = []
def deployModules = [:]
if (project.hasProperty("moduleName")) {
    buildModules = project.property("moduleName").toLowerCase().split(",")
    buildModules.each {
        deployModules.put(it, VALID_DEPLOYABLE_MODULES[it])
    }
} else {
    buildModules = VALID_MODULES
    deployModules = VALID_DEPLOYABLE_MODULES
}

buildModules.each { module ->
    // Creates the Clean Task
    if (!tasks.findByPath("${module}_clean")) {
        task "${module}_clean" doLast({
            def array = commandLinePrefix + ["mvn", "clean"]
            executeProcess(array, "./src/${module}".toString())
        })
    } else {
        logger.debug("Task ${module}_build already exists")
    }

    // Creates the Build Tasks
    if (!tasks.findByPath("${module}_build")) {
        task "${module}_build" doLast({
            def actualCommandLinePost = [];
            if (!testArtifacts) {
                actualCommandLinePost.add("-Dmaven.test.skip=true")
            }
            if (module.equalsIgnoreCase("search")) {
                actualCommandLinePost.add("-pl")
                actualCommandLinePost.add("!crafter-search-solr-itest")
            } else if (module.equalsIgnoreCase("profile")) {
                if (!includeProfile) {
                    actualCommandLinePost.add("-pl")
                    actualCommandLinePost.add("!admin-console,!server")
                }
            }
            if (module.equalsIgnoreCase("studio") && !studioUIFromRepo) {
                actualCommandLinePost.add("-Dstudio.ui.path=../studio-ui/".toString())
                actualCommandLinePost.add("-Dexec.skip=true")
            }
            def array = commandLinePrefix + ["mvn", "install"] + actualCommandLinePost
            executeProcess(array, "./src/${module}".toString())
        })
        // Creates the Dependencies Array
        def buildTask = tasks.findByName("${module}_build")
        buildTask.description "Builds and installs locally ${module} module"
        buildDeps.add(buildTask)

        // Create init tasks
        task "${module}_init" doLast {
            def finalUrl = "${gitURLTemplate}${module}.git".toString()
            def path = "src/${module}".toString()
            def gitCloneCmd = ["git", "clone"]
            if (shallowClone) {
                gitCloneCmd.add("--depth")
                gitCloneCmd.add("1")
            }
            def arry = commandLinePrefix + gitCloneCmd + ["-b", gitSourceBranch, finalUrl, path]
            if (file(path).exists()) {
                logger.lifecycle("Module ${module} has already been initialized, please use " +
                        "'update' to update it.")
            } else {
                logger.lifecycle "Cloning: ${module}, branch: ${gitSourceBranch}, url: ${finalUrl}"
                executeProcess(arry, ".")
            }
        }

        //Creates Update Tasks
        task "${module}_update" doLast {
            if (!file("./src/${module}").exists()) {
                throw new InvalidUserDataException("Module ${module} is not initialized. Please use 'init' to initialize it.")
            } else {
                def arry = commandLinePrefix + ["git", "pull", gitRepo, gitSourceBranch]
                executeProcess(arry, "./src/${module}".toString())
            }
        }

        def cleanTask = tasks.findByName("${module}_clean")
        cleanTask.description "Cleans ${module} module"
        cleanDeps.add(cleanTask)

        def initTask = tasks.findByName("${module}_init")
        initTask.description = "Clones from ${gitURLTemplate}${module} branch ${gitSourceBranch} the module ${module}"
        initDeps.add(initTask)
        def updateTask = tasks.findByName("${module}_update")
        updateTask.description "Updates from ${gitRepo} branch ${gitSourceBranch} the module ${module}"
        updateDeps.add(updateTask)
    } else {
        logger.debug("Task ${module}_build already exists")
    }
}

envs.each { env ->
    // Creates the deploy tasks
    deployModules.keySet().each { module ->
        if (!(env.equalsIgnoreCase("delivery") && module.equalsIgnoreCase("studio"))) {
            if (!tasks.findByName("${module}_${env}_deploy")) {
                task "${module}_${env}_deploy" doLast({
                    def deployable = file(VALID_DEPLOYABLE_MODULES[module])
                    deployBinary(deployable, env)
                    if (module.equalsIgnoreCase("profile")) {
                        deployBinary(file("./src/profile/admin-console/target/crafter-profile-admin.war"), env)
                    } else if (module.equalsIgnoreCase("social")) {
                        deployBinary(file("./src/social/admin/target/crafter-social-admin.war"), env)
                    }
                })
                def deployTask = tasks.findByName("${module}_${env}_deploy")
                deployTask.description "Deploy ${module} in the ${env} enviroment"
                deployDepends.add(deployTask)
            } else {
                logger.debug("Task ${module}_deploy already exists")
            }
        }
    }
    
    /* Per Env tasks */
    if (!tasks.findByName("${env}_start")) {
        task "${env}_start" doLast({
            def extraStartupParams = []
            if (startMongodb) {
                extraStartupParams.add("forceMongo")
            }
            if (!withElasticsearch) {
              extraStartupParams.add("skipElasticsearch")
            }
            if (withSolr) {
              extraStartupParams.add("withSolr")
            }
            def path = env.equalsIgnoreCase("authoring") ? "${authEnvDir}" : "${deliveryEnvDir}"
            if (!file(path).exists()) {
                throw new InvalidUserDataException("The '${env}' enviroment is not deployed. Please run 'deploy -Penv=${env}' before 'start'.")
            }
            executeProcess(commandLinePrefix + [startUpFile] + extraStartupParams, "${path}/bin")
        })
    }

    if (!tasks.findByName("${env}_stop")) {
        task "${env}_stop" doLast({
            def extraStartupParams = []
            if (startMongodb) {
                extraStartupParams.add("forceMongo")
            }
            def path = env.equalsIgnoreCase("authoring") ? "${authEnvDir}" : "${deliveryEnvDir}"
            if (!file(path).exists()) {
                throw new InvalidUserDataException("The '${env}' enviroment is not deployed. Please run 'deploy -Penv=${env}' before 'start'.")
            }
            executeProcess(commandLinePrefix + [shutDownFile] + extraStartupParams, "${path}/bin")
        })
    }

    if (!tasks.findByName("${env}_status")) {
        task "${env}_status" doLast({
            def extraStartupParams = []
            if (startMongodb) {
                extraStartupParams.add("forceMongo")
            }
            def path = env.equalsIgnoreCase("authoring") ? "${authEnvDir}" : "${deliveryEnvDir}"
            if (!file(path).exists()) {
                throw new InvalidUserDataException("The '${env}' enviroment is not deployed. Please run 'deploy -Penv=${env}' before 'start'.")
            }
            executeProcess(commandLinePrefix + ["./crafter.sh", "status"], "${path}/bin")
        })
    }

    if (!tasks.findByName("${env}_bundle_tar")) {
        task "${env}_bundle_tar"(type: Tar) {
            description "Bundles as a Tar file ${env} enviroment"
            def environmentPath = env.equalsIgnoreCase("authoring") ? "${authEnvDir}" : "${deliveryEnvDir}"
            from(environmentPath) {
                into("crafter")
            }
            archiveName "crafter-cms-${env}-${project.version}.tar.gz"
            fileMode null
            dirMode null
            includeEmptyDirs true
            caseSensitive false
            compression = Compression.GZIP
            destinationDir(file("bundles/"))
        }
    }

    switch (typeOfBundle.toLowerCase()) {
        case "tar":
            bundleDeps.add(tasks.findByName("${env}_bundle_tar"))
            break;
        default:
            bundleDeps.add(tasks.findByName("${env}_bundle_tar"))
            break;
    }

    statusDeps.add(tasks.findByName("${env}_status"))
    stopDeps.add(tasks.findByName("${env}_stop"))
    startDeps.add(tasks.findByName("${env}_start"))
}

/* Cleanup non buildable modules */
buildDeps.removeAll([
  tasks.findByName("studio-ui_build"),
  tasks.findByName("plugin-maker_build")
] as Task[])

cleanDeps.removeAll([
  tasks.findByName("studio-ui_clean"),
  tasks.findByName("plugin-maker_clean")
] as Task[])

if (!includeSocial) {
    buildDeps.removeAll([tasks.findByName('social_build')] as Task[])
    deployDepends.removeIf({
        it.name.contains("social")
    })
}

if (!includeProfile) {
    deployDepends.removeIf({
        it.name.contains("profile")
    })
}

task clean() {
    description "Clean all configured Crafter Modules"
}

task build() {
    description "Builds all configured Crafter Modules"
}

task init(dependsOn: initDeps) {
    description "Clones all configured Crafter modules from ${gitURLTemplate} and branch ${gitSourceBranch}"
}

task update(dependsOn: updateDeps) {
    description "Update all configured Crafter modules from ${gitSourceBranch} and branch ${gitSourceBranch}"
}

task upgrade() {
    description "Delete all enviroment information (keeps the site data,db and indexes), update builds and deploy a new enviroment."
}

task deploy() {
    description "Deploys all configured Crafter Modules"
}

task bundle(dependsOn: bundleDeps) {
    description "Tars all Crafter enviroments."
}

task start(dependsOn: startDeps) {
    description "Starts configured Crafter enviroments.."
}

task stop(dependsOn: stopDeps) {
    description "Stops configured Crafter enviroments.."
}

task status(dependsOn: statusDeps) {
    description "Gets the status configured Crafter enviroments.."
}

task buildUtils() {
    description "Builds and deploys Crafter CMS Bundle Utility tools jar file."
    doLast {
        def array = commandLinePrefix + ["mvn", "clean", "package"]
        executeProcess(array, "./utils/")
        envs.each { env ->
            def path = env.equalsIgnoreCase("authoring") ? "${authEnvDir}" : "${deliveryEnvDir}"
            copy {
                from "./utils/target/craftercms-utils.jar"
                into "${path}/bin"
            }
        }
    }
}

task selfupdate {
    description "Updates the Crafter CMS project"
    doLast {
        def arry = commandLinePrefix + ["git", "pull", gitRepo, gitSourceBranch]
        executeProcess(arry, ".")
    }
}

task delay {
    doLast {
        sleep(30 * 1000)
    }
}

task newPlugin(type: GradleBuild) {
  description "Creates the folder structure for a new plugin"
  group "plugin"

  buildFile = Paths.get("src", "plugin-maker", "build.gradle")
  tasks = ['newPlugin']
  startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}

task packagePlugin(type: GradleBuild) {
  description "Packages a Crafter Studio plugin"
  group "plugin"

  buildFile = Paths.get("src", "plugin-maker", "build.gradle")
  tasks = ['packagePlugin']
  startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}

task publishPlugin(type: GradleBuild) {
  description "Publishes a plugin to the Crafter Marketplace"
  group "plugin"

  buildFile = Paths.get("src", "plugin-maker", "build.gradle")
  tasks = ['publishPlugin']
  startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}

/** Makes sure Depends are run in order. **/
dependsOnOrdered(clean, cleanDeps)
dependsOnOrdered(build, [clean] + buildDeps)
dependsOnOrdered(init, initDeps)
dependsOnOrdered(update, updateDeps)
dependsOnOrdered(deploy, [downloadGroovy, downloadTomcat, downloadSolr, downloadElasticsearch, downloadMariaDB4j] + envDepends + deployDepends + [buildUtils])
dependsOnOrdered(upgrade, [update, build, deploy])

def deployBinary(deployable, env) {
    if (deployable.exists()) {
        def path = env.equals("authoring") ? authEnvDir : deliveryEnvDir
        path += deployable.absolutePath.endsWith(".jar") ? "bin/crafter-deployer/" : "bin/apache-tomcat/webapps/"
        path += deployable.name
        delete {
            delete path
            delete path.take(path.lastIndexOf('.'))
        }
        copy {
            from deployable.absolutePath
            into path.take(path.lastIndexOf('/'))
        }
    } else {
        logger.lifecycle "WARN: You haven't built ${module} module"
    }
}

def executeProcess(command, workingDir) {
    ProcessBuilder pb = new ProcessBuilder(command)
    pb.directory(new File(workingDir))
    pb.redirectErrorStream(true)
    def log = new File(processLogFile)
    pb.redirectOutput(ProcessBuilder.Redirect.to(log))
    def tailer = null
    if(!silentBuild) {
      tailer = Tailer.create(log, new TailerListenerAdapter() {
        def void handle(String line) {
          println line
        }
      }, processTailReadDelay)
    }
    Process proc = pb.start();
    proc.waitFor()
    if(tailer) {
      Thread.sleep(processTailFinishDelay)
      tailer.stop()
    }
    log.delete()
    if (proc.exitValue() != 0) {
        throw new GradleException("${command} @ ${workingDir} return a  non-zero value (${proc.exitValue()})")
    }
}

def getModule() {
    if (project.hasProperty("moduleName")) {
        def moduleName = project.property("moduleName")
        moduleName = moduleName.trim().toLowerCase()
        return moduleName.trim().isEmpty() ? "all" : moduleName
    } else {
        return "all"
    }
}

def getEnv() {
    if (project.hasProperty("env")) {
        def environmentName = project.property("env")
        environmentName = environmentName.trim().toLowerCase()
        return environmentName.trim().isEmpty() ? "all" : environmentName
    } else {
        return "all"
    }
}

def upperCaseFirstLetter(str) {
    return str.substring(0, 1).toUpperCase() + str.substring(1)
}

// Run task in the right order.
void dependsOnOrdered(Task task, List others) {
    task.dependsOn(others)
    for (int i = 0; i < others.size() - 1; i++) {
        others.get(i + 1).mustRunAfter(others.get(i))
    }
}
