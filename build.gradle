plugins {
    id "de.undercouch.download" version "3.1.2"
}

def isWin=System.getProperty('os.name').toLowerCase().contains('windows')
def isOSX=System.getProperty('os.name').toLowerCase().contains('mac')
def isNix=(System.getProperty('os.name').toLowerCase().contains('nix') || System.getProperty('os.name').toLowerCase().contains('aix') || System.getProperty('os.name').toLowerCase().contains('nux'))

def commandLinePrefix = []
def startUpFile = "./startup.sh"
def shutDownFile ="./shutdown.sh"
if(isWin){
    startUpFile = "startup.bat"
    shutDownFile = "shutdown.bat"
    commandLinePrefix =["cmd","/c"]
}

def getModule(){
    if(project.hasProperty("moduleName")){
        def moduleName=project.property("moduleName")
        moduleName=moduleName.trim().toLowerCase()
        return moduleName.trim().isEmpty()?"all":moduleName
    }else{
        return "all"
    }
}

def getEnv(){
    if(project.hasProperty("env")){
        def enviromentName=project.property("env")
        enviromentName=enviromentName.trim().toLowerCase()
        return enviromentName.trim().isEmpty()?"all":enviromentName
    }else{
        return "all"
    }
}

def isAllEnvs(){
    return getEnv().equalsIgnoreCase("all")
}

ext {

    /** Download Properties **/
    tomcatVersion=project.hasProperty("tomcat.version")?project.property("tomcat.version"):"8.5.6"
    solrVersion=project.hasProperty("solr.version")?project.property("solr.version"):"6.4.1"
    downloadDir=project.hasProperty("downloadDir")?project.property("downloadDir"):"./downloads/"
    /** Environment Building properties **/
    authEnv=project.hasProperty("authoring.root")?project.property("authoring.root"):"./crafter-auth-env/"
    liveEnv=project.hasProperty("delivery.root")?project.property("delivery.root"):"./crafter-delivery-env/"
    includeProfile=project.hasProperty("crafter.profile")?project.property("crafter.profile"):false
    includeSocial=project.hasProperty("social.profile")?project.property("crafter.social"):false

    /** Social Need Profile **/
    if(includeSocial){
        includeProfile=true
    }

    /** Tomcat env **/
    authTomcatPort=project.hasProperty("tomcat.port.http")?project.property("tomcat.port.http"):25500
    authTomcatShutdownPort=project.hasProperty("tomcat.port.shutdown")?project.property("tomcat.port.shutdown"):25503
    authTomcatAJPPort=project.hasProperty("tomcat.port.ajp")?project.property("tomcat.port.ajp"):25502
    authTomcatSSLPort=project.hasProperty("tomcat.port.https")?project.property("tomcat.port.https"):25501
    authTomcatDebug=project.hasProperty("tomcat.port.debug")?project.property("tomcat.port.debug"):25509
    solrAuthPort=project.hasProperty("crafter.authoring.solr.port")?project.property("crafter.authoring.solr.port"):25530
    solrAuthDebugPort=project.hasProperty("crafter.authoring.solr.debugPort")?project.property("crafter.authoring.solr.debugPort"):25539
    mariaDbPort=project.hasProperty("crafter.mariadb.port")?project.property("crafter.mariadb.port"):25504

    deployerAuthPort=project.hasProperty("crafter.authoring.deployer.port")?project.property("crafter.authoring.deployer.port"):25560
    deployerAuthDebugPort=project.hasProperty("crafter.authoring.deployer.debugPort")?project.property("crafter.authoring.deployer.debugPort"):25569



    solrDevPort=project.hasProperty("crafter.delivery.solr.port")?project.property("crafter.delivery.solr.debugPort"):25730
    solrDevDebugPort=project.hasProperty("crafter.delivery.solr.debugPort")?project.property("crafter.delivery.solr.port"):25739
    deployerDevPort=project.hasProperty("crafter.authoring.deployer.port")?project.property("crafter.authoring.deployer.port"):25760
    deployerDevDebugPort=project.hasProperty("crafter.authoring.deployer.debugPort")?project.property("crafter.authoring.deployer.debugPort"):25769

    /** Tomcat Live **/

    liveTomcatPort=project.hasProperty("tomcat.delivery.port.http")?project.property("tomcat.delivery.port.http"):25710
    liveTomcatShutdownPort=project.hasProperty("tomcat.delivery.port.shutdown")?project.property("tomcat.delivery.port.shutdown"):25713
    liveTomcatAJPPort=project.hasProperty("tomcat.delivery.port.ajp")?project.property("tomcat.delivery.port.ajp"):25712
    liveTomcatSSLPort=project.hasProperty("tomcat.delivery.port.https")?project.property("tomcat.delivery.port.https"):25711
    liveTomcatDebug=project.hasProperty("tomcat.delivery.port.debug")?project.property("tomcat.delivery.port.debug"):25719



    /** Git properties **/
    gitURLTemplate=project.hasProperty("crafter.git.url")?project.property("crafter.git.url"):"https://github.com/craftercms/"
    sourceBranch=project.hasProperty("crafter.git.branch")?project.property("crafter.git.branch"):"master"
    gitRepo=project.hasProperty("crafter.git.remote")?project.property("crafter.git.remote"):"origin"
    studioUIFromRepo=project.hasProperty("crafter.ui.repo")?project.property("crafter.ui.repo"):false

    /** Clonable Artifacts **/
    VALID_MODULES=["commons","core","search","profile","engine","deployer","studio","social","studio2-ui"]
    /** Deployable Artifacts **/
    VALID_DEPLOYABLE_MODULES=[
            "search":"./src/search/crafter-search-server/target/crafter-search.war",
            "profile":"./src/profile/server/target/crafter-profile.war",
            "engine":"./src/engine/target/ROOT.war",
            "deployer":"./src/deployer/target/crafter-deployer.jar",
            "studio":"./src/studio/target/studio.war",
            "social":"./src/social/server/target/crafter-social.war"]

}

apply from:"downloads.gradle"
apply from:"environments.gradle"


task("init"){
    description "Clones Crafter CMS stack"

    doFirst{
        def module = getModule();
    }

    doLast {

        if (module.equals("all")) {
            VALID_MODULES.each {
                cloneModule(commandLinePrefix, it).execute()
            }
        } else if (VALID_MODULES.contains(module)) {
            cloneModule(commandLinePrefix, module).execute()
        } else {
            throw new InvalidUserDataException("${module} is not a valid module, please one of ${VALID_MODULES}")
        }
    }

}

task("update"){
    description "Update Crafter CMS stack"
    doFirst{
        def module = getModule();
    }
    doLast {

        if (module.equals("all")) {
            VALID_MODULES.each {
                updateModule(commandLinePrefix, it).execute()
            }
        } else if (VALID_MODULES.contains(module)) {
            updateModule(commandLinePrefix, module).execute()
        } else {
            throw new InvalidUserDataException("${module} is not a valid module, please use one of ${VALID_MODULES}")
        }
    }
}

task("selfupdate"){
    description "Self update this project"
    doLast{
        def arry = commandLinePrefix + ["git", "pull", gitRepo, sourceBranch]
        executeProcess(arry,".")
    }
}

task("start"){
    doLast{
        def env = getEnv()
        switch (env){
            case "all":
                if(!file(authEnv).exists() || !file(liveEnv).exists()){
                    throw new InvalidUserDataException("Neither enviroment ('authoring'/'delivery') are deployed. Please run deploy before 'start'.")
                }
                startAuth(commandLinePrefix,startUpFile).execute()
                startDelivery(commandLinePrefix,startUpFile).execute()
            case "authoring":
                if(!file(authEnv).exists()){
                    throw new InvalidUserDataException("The 'authoring' enviroment is not deployed. Please run 'deploy -Penv=authoring' before 'start'.")
                }
                startAuth(commandLinePrefix,startUpFile).execute()
                break
            case "delivery":
                if(!file(liveEnv).exists()){
                    throw new InvalidUserDataException("The 'delivery' enviroment is not deployed. Please run 'deploy -Penv=delivery' before 'start'.")
                }
                startDelivery(commandLinePrefix,startUpFile).execute()
                break
            default:
                throw new InvalidUserDataException("'${env}' is not a valid environment, please use 'authoring' or 'delivery'.")
        }
    }
}

task("stop"){
    doLast{
        def env = getEnv()
        switch (env){
            case "all":
                if(!file(authEnv).exists() || !file(liveEnv).exists()){
                    throw new InvalidUserDataException("Neither enviroment ('authoring'/'delivery') are deployed. Please run deploy before 'stop'.")
                }
                stopAuth(commandLinePrefix,shutDownFile).execute()
                stopDevlivery(commandLinePrefix,shutDownFile).execute()
            case "authoring":
                if(!file(authEnv).exists()){
                    throw new InvalidUserDataException("The 'authoring' enviroment is not deployed. Please run 'deploy -Penv=authoring' before 'stop'.")
                }
                stopAuth(commandLinePrefix,shutDownFile).execute()
                break
            case "delivery":
                if(!file(liveEnv).exists()){
                    throw new InvalidUserDataException("The 'delivery' enviroment is not deployed. Please run 'deploy -Penv=delivery' before 'stop'.")
                }
                stopDevlivery(commandLinePrefix,shutDownFile).execute()
                break
            default:
                throw new InvalidUserDataException("'${env}' is not a valid environment, please use 'authoring' or 'delivery'.")
        }
    }
}

task("clean"){
    description "Clean Crafter CMS stack"

    doFirst {
        def module=getModule();
    }

    doLast {
        if (module.equals("all")) {
            VALID_MODULES.each {
                cleanModule(commandLinePrefix, it).execute()
            }
        } else if (VALID_MODULES.contains(module)) {
            cleanModule(commandLinePrefix, module).execute()
        } else {
            throw new InvalidUserDataException("${module} is not a valid module, please use one of ${VALID_MODULES}")
        }
    }
}

task("build"){
    description "Builds Crafter CMS stack"

    doFirst{
        def module = getModule();
    }

    doLast {

        if (module.equals("all")) {
            VALID_MODULES.each {
                if(!it.equalsIgnoreCase("studio2-ui")) {
                    buildModule(commandLinePrefix, it).execute()
                }
            }
        } else if (VALID_MODULES.contains(module)) {
            if(!module.equalsIgnoreCase("studio2-ui")) {
                buildModule(commandLinePrefix, module).execute()
            }
        } else {
            throw new InvalidUserDataException("${module} is not a valid module, please use one of ${VALID_MODULES}")
        }
    }
}

task("deploy") {
    description "Clean Crafter CMS stack"

    doFirst {
        def module = getModule()
        def env = getEnv()
        switch (env){
            case "all":
                checkEnvWD(authEnv,"authoring")
                checkEnvWD(liveEnv,"delivery")
                break
            case "authoring":
                checkEnvWD(authEnv,env)
                break
            case "delivery":
                checkEnvWD(liveEnv,env)
                break
            default:
                throw new InvalidUserDataException("'${env}' is not a valid environment, please use 'authoring' or 'delivery'.")
        }
    }

    doLast {
        if (module.equals("all")) {
            VALID_DEPLOYABLE_MODULES.keySet().each {
                if(isAllEnvs()){
                    deployModule(commandLinePrefix, it,"authoring").execute()
                    deployModule(commandLinePrefix, it,"delivery").execute()
                }else{
                    deployModule(commandLinePrefix, it,env).execute()
                }
                file(VALID_DEPLOYABLE_MODULES[it]).delete()
            }
        } else if (VALID_DEPLOYABLE_MODULES.containsKey(module)) {
            if(isAllEnvs()){
                deployModule(commandLinePrefix, module,"authoring").execute()
                deployModule(commandLinePrefix, module,"delivery").execute()
            }else{
                deployModule(commandLinePrefix, module,env).execute()
            }
            file(VALID_DEPLOYABLE_MODULES[module]).delete()
        } else {
            throw new InvalidUserDataException("${module} is not a valid module, please use one of ${VALID_DEPLOYABLE_MODULES.keySet()}")
        }
    }
}

task("bundle"){
    doLast {
        def env = getEnv()
        switch (env) {
            case "all":
                pack(authEnv, "authoring")
                pack(liveEnv, "delivery")
                break
            case "authoring":
                pack(authEnv, "authoring")
                break
            case "delivery":
                pack(liveEnv, "delivery")
                break
            default:
                throw new InvalidUserDataException("'${env}' is not a valid environment, please use 'authoring' or 'delivery'.")
        }
    }
}

def cleanModule(commandLinePrefix,module){
    def ctask=tasks.findByPath("clean${module}")
    if (ctask!= null){
        return ctask
    }else {
        return tasks.create("clean${module}") {
            executeProcess(commandLinePrefix +  commandLinePrefix + ["mvn", "clean"],"./src/${module}".toString())
        }
    }
}

def updateModule(commandLinePrefix,module){
    def btask=tasks.findByPath("update${module}")
    if (btask!= null){
        return btask
    }else {
        return tasks.create("update${module}") {
            if(!file("./src/${module}").exists()) {
                throw new InvalidUserDataException("Module ${module} is not initialized. Please use 'update' to initialize it.")
            }else {
                def arry = commandLinePrefix + ["git", "pull", gitRepo, sourceBranch]
                executeProcess(arry,"./src/${module}".toString())
            }
        }
    }
}

def cloneModule(commandLinePrefix,module){
    def btask=tasks.findByPath("clone${module}")
    if (btask!= null){
        return btask
    }else {
        return tasks.create("clone${module}") {
            def finalUrl="${gitURLTemplate}${module}.git".toString()
            def path="src/${module}".toString()

            def arry = commandLinePrefix + ["git","clone","-b",sourceBranch,finalUrl,path]
            if(file(path).exists()) {
                throw new InvalidUserDataException("Module ${module} has already been initialized, please use 'init' to update it.")
            }else {
                executeProcess(arry,".")
            }
        }
    }
}

def startAuth(commandLinePrefix,startUpFile){
    def btask=tasks.findByPath("startAuth")
    if (btask!= null){
        return btask
    }else {
        tasks.create("startAuth") {
            executeProcess(commandLinePrefix + [startUpFile],authEnv)
        }
    }
}

def startDelivery(commandLinePrefix,startUpFile){
    def btask=tasks.findByPath("startDelivery")
    if (btask!= null){
        return btask
    }else {
        tasks.create("startDelivery") {
            executeProcess(commandLinePrefix + [startUpFile],liveEnv)
        }
    }
}

def stopAuth(commandLinePrefix,shutDownFile){
    def btask=tasks.findByPath("stopAuth")
    if (btask!= null){
        return btask
    }else {
        tasks.create("stopAuth"){
            executeProcess(commandLinePrefix + [shutDownFile],authEnv)
        }
    }
}

def stopDevlivery(commandLinePrefix,shutDownFile){
    def btask=tasks.findByPath("stopDelivery")
    if (btask!= null){
        return btask
    }else {
        tasks.create("stopDelivery") {
            executeProcess(commandLinePrefix + [shutDownFile],liveEnv)
        }
    }
}

def buildModule(commandLinePrefix,module){
    def btask=tasks.findByPath("build${module}")
    if (btask!= null){
        return btask
    }else {
        return tasks.create("build${module}") {
            def commandLinePost=[]
            if(!project.hasProperty("test")){
                commandLinePost.add("-Dmaven.test.skip=true")
            }
            if(module.equalsIgnoreCase("studio") && !studioUIFromRepo){
                commandLinePost.add("-Dstudio.ui.path=../studio2-ui/".toString())
                commandLinePost.add("-Dexec.skip=true")
            }
            def array=commandLinePrefix +  commandLinePrefix + ["mvn", "clean", "install"] + commandLinePost
            executeProcess(array,"./src/${module}".toString())
        }
    }
}

def deployModule(commandLinePrefix,module,env){
    def dtask=tasks.findByPath("deploy${module}")
    if (dtask!= null){
        return dtask
    }else {
        return tasks.create("deploy${module}") {
            println "Deploy ${module} to ${env}"
            if (module.equals("studio") && env.equals("delivery")) {
                println "Ignoring module 'studio' can not be deployed in environment 'delivery'"
            }else {
                def deployable = file(VALID_DEPLOYABLE_MODULES[module])
                if (deployable.exists()) {
                    def path = env.equals("authoring") ? authEnv : liveEnv
                    path += deployable.absolutePath.endsWith(".jar") ? "crafter-deployer/" : "apache-tomcat/webapps/"
                    path += deployable.name
                    delete {
                        delete path
                        delete path.take(path.lastIndexOf('.'))
                    }
                    copy {
                        from VALID_DEPLOYABLE_MODULES[module]
                        into path.take(path.lastIndexOf('/'))
                    }
                } else {
                    println "WARN: You haven't build ${module} module"
                }
            }
        }
    }
}

def checkEnvWD(path,env){
    def ddir=file(path)
    if(!ddir.exists() || project.hasProperty("forceDeploy")) {
        ddir.mkdir()
        def deployerDir = file("${path}/crafter-deployer")
        deployerDir.mkdir()
        downloadTomcat.execute()
        downloadSolr.execute()
        if(env.equals("authoring")){
            authoringEnvirment.execute()
        }else if (env.equals("delivery")){
            deliveyEnviroment.execute()
        }
    }
}

def pack(environmentPath,envName){
    def dtask=tasks.findByPath("tar${envName}")
    if (dtask!= null){
        return dtask
    }else {
        def zipTask = tasks.findByPath("zip${envName}")
        if (zipTask != null) {
            zipTask.execute()
        } else {
            tasks.create("zip${envName}", Zip.class) {
                from(environmentPath) {
                    into("crafter")
                }
                archiveName "crafter-${envName}-cms.zip"
                fileMode null
                dirMode null
                includeEmptyDirs true
                metadataCharset "UTF-8"
                caseSensitive false
                destinationDir(file("bundles/"))
            }.execute()
        }

        def tarTask = tasks.findByPath("tar${envName}")
        if (tarTask != null) {
            tarTask.execute()
        } else {
            tasks.create("tar${envName}", Tar.class) {
                from(environmentPath) {
                    into("crafter")
                }
                archiveName "crafter-${envName}-cms.tar.gz"
                fileMode null
                dirMode null
                includeEmptyDirs true
                caseSensitive false
                compression = Compression.GZIP
                destinationDir(file("bundles/"))
            }.execute()
        }
    }
}

def executeProcess(command,workingDir){
    ProcessBuilder pb = new ProcessBuilder(command)
    pb.directory(new File(workingDir))
    pb.redirectErrorStream(true)
    Process proc = pb.start();
    proc.inputStream.eachLine {println it}
}
