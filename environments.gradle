import groovy.transform.Field

import java.nio.file.Paths
import org.apache.tools.ant.filters.ReplaceTokens

@Field final isWin = System.getProperty('os.name').toLowerCase().contains('windows')
@Field final isOSX = System.getProperty('os.name').toLowerCase().contains('mac')
@Field final isNix = (System.getProperty('os.name').toLowerCase().contains('nix') || System.getProperty('os.name').toLowerCase().contains('aix') || System.getProperty('os.name').toLowerCase().contains('nux'))

@Field def commandLinePrefix = isWin ? ["cmd", "/c"] : []

/**
 Setup environment
 **/
task("authoringPostEnvironment") {
    description "Setup the Crafter authoring environment"

    doLast {
        copy {
            from "./resources/tomcat-config/crafter"
            into "${authEnv}/bin/apache-tomcat/shared/classes/crafter"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT : String.valueOf(authTomcatPort),
                                           SOLR_PORT        : String.valueOf(authSolrPort),
                                           SOLR_PORT_D      : String.valueOf(authSolrDebugPort),
                                           DEPLOYER_D_PORT  : String.valueOf(authDeployerDebugPort),
                                           DEPLOYER_PORT    : String.valueOf(authDeployerPort),
                                           MARIADB_PORT     : String.valueOf(authMariaDbPort),
                                           TOMCAT_DEBUG_PORT: String.valueOf(authTomcatDebug),
                                           MONGODB_PORT     : String.valueOf(authMongoDBPort),
                                           ENV              : "authoring",
                                           SMTP_PORT        : String.valueOf(authSMTPPort)
            ])
            eachFile {
                if (it.relativePath.getFile(file("${authEnv}/bin/apache-tomcat/shared/classes/crafter")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        copy {
            from "./resources/deployer/"
            into "${authEnv}/bin/crafter-deployer"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT : String.valueOf(authTomcatPort),
                                           SOLR_PORT        : String.valueOf(authSolrPort),
                                           SOLR_PORT_D      : String.valueOf(authSolrDebugPort),
                                           DEPLOYER_D_PORT  : String.valueOf(authDeployerDebugPort),
                                           DEPLOYER_PORT    : String.valueOf(authDeployerPort),
                                           MARIADB_PORT     : String.valueOf(authMariaDbPort),
                                           TOMCAT_DEBUG_PORT: String.valueOf(authTomcatDebug),
                                           MONGODB_PORT     : String.valueOf(authMongoDBPort),
                                           ENV              : "authoring",
                                           SMTP_PORT        : String.valueOf(authSMTPPort)
            ])
            eachFile {
                if (it.relativePath.getFile(file("${authEnv}/bin/crafter-deployer")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        copy {
            from("./resources/crafter/") {
                exclude "**/init-site.*"
                exclude "**/remove-site.*"
                eachFile {
                    if (it.relativePath.getFile(file("${authEnv}/bin/")).exists() && !forceDeploy) {
                        it.exclude()
                    }
                }
            }
            into "${authEnv}/bin/"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT : String.valueOf(authTomcatPort),
                                           SOLR_PORT        : String.valueOf(authSolrPort),
                                           SOLR_PORT_D      : String.valueOf(authSolrDebugPort),
                                           DEPLOYER_D_PORT  : String.valueOf(authDeployerDebugPort),
                                           DEPLOYER_PORT    : String.valueOf(authDeployerPort),
                                           DEPLOYMENT_DIR   : String.valueOf(authDeploymentDir),
                                           MARIADB_PORT     : String.valueOf(authMariaDbPort),
                                           TOMCAT_DEBUG_PORT: String.valueOf(authTomcatDebug),
                                           MONGODB_PORT     : String.valueOf(authMongoDBPort),
                                           ENV              : "authoring",
                                           VERSION          : project.version,
                                           GIT_BUILD_ID     : gitRevisionId,
                                           SMTP_PORT        : String.valueOf(authSMTPPort)

            ])
        }

        copy {
            from "./resources/migration"
            into "${authEnv}/bin/migration"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT : String.valueOf(authTomcatPort)])
            eachFile {
                if (it.relativePath.getFile(file("${authEnv}/bin/migration")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        if (!isWin) {
            exec {
                workingDir "${authEnv}/bin/apache-tomcat/bin/"
                commandLine commandLinePrefix + ["chmod", "+x", "catalina.sh", "setenv.sh", "configtest.sh", "daemon.sh",
                                                 "digest.sh", "setclasspath.sh", "shutdown.sh", "startup.sh", "tool-wrapper.sh",
                                                 "version.sh"]
            }
            exec {
                workingDir "${authEnv}/bin/crafter-deployer/"
                commandLine commandLinePrefix + ["chmod", "+x", "deployer.sh", "startup.sh", "shutdown.sh"]
            }
            exec {
                workingDir "${authEnv}/bin/migration"
                commandLine commandLinePrefix + ["chmod", "+x", "migrate.sh", "migrate-bg.sh", "import.sh",
                                                 "import-bg.sh", "setenv.sh"]
            }
            exec {
                workingDir "${authEnv}/bin"
                commandLine commandLinePrefix + ["chmod", "+x", "crafter.sh", "startup.sh", "debug.sh", "shutdown.sh",
                                                 "crafter-setenv.sh", "upgrade/start-upgrade.sh",
                                                 "upgrade/upgrade-target.sh"]
            }
        }

        updateCatalinaSettings(authEnv);
        updateTomcatPorts("${authEnv}/bin/apache-tomcat/conf/server.xml", authTomcatPort, authTomcatAJPPort,
                          authTomcatShutdownPort, authTomcatSSLPort)
        updateTomcatContext("${authEnv}/bin/apache-tomcat/conf/context.xml")
        updateCatalinaLogging("${authEnv}/bin/apache-tomcat/conf/logging.properties")
        addSolrIndexHome("${authEnv}/bin/solr/server/solr/solr.xml")
        downloadGrapes("${authEnv}/bin", "upgrade/start-upgrade.groovy")
        downloadGrapes("${authEnv}/bin", "upgrade/upgrade-target.groovy")
    }
}

task("deliveryPostEnvironment") {
    description "Setup the Crafter CMS delivery environment"

    doLast {

        copy {
            from "./resources/tomcat-config-delivery/crafter"
            into "${deliveryEnv}/bin/apache-tomcat/shared/classes/crafter"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT : String.valueOf(deliveryTomcatPort),
                                           SOLR_PORT        : String.valueOf(deliverySolrPort),
                                           SOLR_PORT_D      : String.valueOf(deliverySolrDebugPort),
                                           DEPLOYER_D_PORT  : String.valueOf(deliveryDeployerDebugPort),
                                           DEPLOYER_PORT    : String.valueOf(deliveryDeployerPort),
                                           TOMCAT_DEBUG_PORT: String.valueOf(deliveryTomcatDebugPort),
                                           MONGODB_PORT     : String.valueOf(deliveryMongoDBPort),
                                           ENV              : "delivery"
            ])
            eachFile {
                if (it.relativePath.getFile(file("${deliveryEnv}/bin/apache-tomcat/shared/classes/crafter")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        copy {
            from "./resources/deployer/"
            into "${deliveryEnv}/bin/crafter-deployer"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT : String.valueOf(deliveryTomcatPort),
                                           SOLR_PORT        : String.valueOf(deliverySolrPort),
                                           SOLR_PORT_D      : String.valueOf(deliverySolrDebugPort),
                                           DEPLOYER_D_PORT  : String.valueOf(deliveryDeployerDebugPort),
                                           DEPLOYER_PORT    : String.valueOf(deliveryDeployerPort),
                                           TOMCAT_DEBUG_PORT: String.valueOf(deliveryTomcatDebugPort),
                                           MONGODB_PORT     : String.valueOf(deliveryMongoDBPort),
                                           ENV              : "delivery"
            ])
            eachFile {
                if (it.relativePath.getFile(file("${deliveryEnv}/bin/crafter-deployer")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }
        copy {
            from "./resources/crafter/"
            into "${deliveryEnv}/bin/"
            filter(ReplaceTokens, tokens: [TOMCAT_HTTP_PORT : String.valueOf(deliveryTomcatPort),
                                           SOLR_PORT        : String.valueOf(deliverySolrPort),
                                           SOLR_PORT_D      : String.valueOf(deliverySolrDebugPort),
                                           DEPLOYER_D_PORT  : String.valueOf(deliveryDeployerDebugPort),
                                           DEPLOYER_PORT    : String.valueOf(deliveryDeployerPort),
                                           DEPLOYMENT_DIR   : String.valueOf(deliveryDeploymentDir),
                                           TOMCAT_DEBUG_PORT: String.valueOf(deliveryTomcatDebugPort),
                                           MONGODB_PORT     : String.valueOf(deliveryMongoDBPort),
                                           ENV              : "delivery",
                                           VERSION          : project.version,
                                           GIT_BUILD_ID     : gitRevisionId
            ])
            eachFile {
                if (it.relativePath.getFile(file("${deliveryEnv}/bin/")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        if (!isWin) {
            exec {
                workingDir "${deliveryEnv}/bin/apache-tomcat/bin/"
                commandLine commandLinePrefix + ["chmod", "+x", "catalina.sh", "setenv.sh", "configtest.sh", "daemon.sh",
                                                 "digest.sh", "setclasspath.sh", "shutdown.sh", "startup.sh", "tool-wrapper.sh",
                                                 "version.sh"]
            }
            exec {
                workingDir "${deliveryEnv}/bin/crafter-deployer/"
                commandLine commandLinePrefix + ["chmod", "+x", "deployer.sh", "startup.sh", "shutdown.sh"]
            }
            exec {
                workingDir "${deliveryEnv}/bin"
                commandLine commandLinePrefix + ["chmod", "+x", "crafter.sh", "startup.sh", "debug.sh", "shutdown.sh",
                                                 "crafter-setenv.sh", "init-site.sh", "remove-site.sh",
                                                 "upgrade/start-upgrade.sh", "upgrade/upgrade-target.sh"]
            }
        }

        updateTomcatPorts("${deliveryEnv}/bin/apache-tomcat/conf/server.xml", deliveryTomcatPort, deliveryTomcatAJPPort,
                          deliveryTomcatShutdownPort, deliveryTomcatSSLPort)
        updateCatalinaSettings(deliveryEnv)
        updateTomcatContext("${deliveryEnv}/bin/apache-tomcat/conf/context.xml")
        updateCatalinaLogging("${deliveryEnv}/bin/apache-tomcat/conf/logging.properties")
        addSolrIndexHome("${deliveryEnv}/bin/solr/server/solr/solr.xml")
        downloadGrapes("${deliveryEnv}/bin", "init-site.groovy")
        downloadGrapes("${deliveryEnv}/bin", "remove-site.groovy")
        downloadGrapes("${deliveryEnv}/bin", "upgrade/start-upgrade.groovy")
        downloadGrapes("${deliveryEnv}/bin", "upgrade/upgrade-target.groovy")
    }
}


def envs = []
if (getEnv().equalsIgnoreCase("all")) {
    envs = ["authoring", "delivery"]
} else {
    envs = [getEnv()]
}

envs.each { env ->
    if (!tasks.findByName("${env}Environment")) {
        task "${env}Environment" doLast {
            description "Setup the Crafter ${env} environment"
            def path = env.equalsIgnoreCase("authoring") ? "${authEnv}" : "${deliveryEnv}"

            if (!file("${path}/bin/groovy").exists()) {
                copy {
                    from zipTree(downloadDir + "/apache-groovy-${groovyVersion}.zip")
                    into "${path}/bin"
                }
                file("${path}/bin/groovy-${groovyVersion}").renameTo(file("${path}/bin/groovy"))
            }

            if (!file("${path}/bin/apache-tomcat").exists()) {
                copy {
                    from zipTree(downloadDir + "/apache-tomcat-${tomcatVersion}.zip")
                    into "${path}/bin"
                    exclude "**/webapps/**"
                }
                file("${path}/bin/apache-tomcat-${tomcatVersion}").renameTo(file("${path}/bin/apache-tomcat"))
                file("${path}/bin/apache-tomcat/shared/lib").mkdirs()
            }

            if (!file("${path}/bin/solr").exists()) {
                copy {
                    from zipTree(downloadDir + "/solr-${solrVersion}.zip")
                    into "${path}/bin"
                }
                file("${path}/bin/solr-${solrVersion}").renameTo(file("${path}/bin/solr"))
            }

            copy {
              from "$downloadDir/mariaDB4j-app-${mariadb4jVersion}.jar"
              into "${path}/bin/"
            }
            file("${path}/bin/mariaDB4j-app-${mariadb4jVersion}.jar").renameTo(file("${path}/bin/mariaDB4j-app.jar"))

            copy {
                from "./src/search/crafter-search-provider/solr/configsets"
                into "${path}/bin/solr/server/solr/configsets"
                eachFile {
                    if (it.relativePath.getFile(file("${path}/bin/solr/server/solr/configsets")).exists() && !forceDeploy) {
                        it.exclude()
                    }
                }
            }

            /** Remove Non util stuff **/
            def webapps = file("${path}/bin/apache-tomcat/webapps/")
            if (!webapps.exists()) {
                webapps.mkdir()
            }

            copy {
                from "./resources/tomcat-config/setenv.sh"
                from "./resources/tomcat-config/setenv.bat"
                into "${path}/bin/apache-tomcat/bin"
                eachFile {
                    if (it.relativePath.getFile(file("${path}/bin/apache-tomcat/bin")).exists() && !forceDeploy) {
                        it.exclude()
                    }
                }
            }

            copy {
                from "./resources/tomcat-config/catalina.policy"
                into "${path}/bin/apache-tomcat/conf/"
            }

            copy {
                from "./src/deployer/README.md"
                into "${path}/bin/crafter-deployer/"
                eachFile {
                    if (it.relativePath.getFile(file("${path}/bin/crafter-deployer/")).exists() && !forceDeploy) {
                        it.exclude()
                    }
                }
            }

            copy {
                from "./src/studio/README.md"
                into "${path}/bin/apache-tomcat"
                eachFile {
                    if (it.relativePath.getFile(file("${path}/bin/apache-tomcat")).exists() && !forceDeploy) {
                        it.exclude()
                    }
                }
            }

            copy {
                from "./resources/LICENSE"
                from "./resources/README.txt"
                into "${path}/"
                eachFile {
                    if (it.relativePath.getFile(file("${path}/")).exists() && !forceDeploy) {
                        it.exclude()
                    }
                }
            }
        }
    }

    tasks.findByName("${env}Environment").finalizedBy("${env}PostEnvironment")
}

def updateTomcatPorts(serverConfigFile, http, ajp, shutdown, ssl) {
    def serverConfig = new XmlParser().parse(serverConfigFile)
    serverConfig.@port = shutdown
    serverConfig.Service.Connector.each {
        if (it.@protocol.equalsIgnoreCase("HTTP/1.1")) {
            it.@port = http
            it.@redirectPort = ssl
            it.@URIEncoding = "UTF-8"
        } else if (it.@protocol.equalsIgnoreCase("AJP/1.3")) {
            it.@port = ajp
            it.@redirectPort = ssl
            it.@URIEncoding = "UTF-8"
        }
    }
    def printer = new XmlNodePrinter(new PrintWriter(serverConfigFile))
    printer.preserveWhitespace = true
    printer.print(serverConfig)
}

def updateTomcatContext(serverConfigFile) {
    def contextConfig = new XmlParser().parse(serverConfigFile)
    new Node(contextConfig, 'Resources', [cachingAllowed: true, cacheMaxSize: 100000])
    def printer = new XmlNodePrinter(new PrintWriter(serverConfigFile))
    printer.preserveWhitespace = true
    printer.print(contextConfig)
}

def updateCatalinaSettings(env) {
    Properties catalinaProperties = new Properties()
    catalinaProperties.load(new FileInputStream("${env}/bin/apache-tomcat/conf/catalina.properties"))
    catalinaProperties.setProperty("shared.loader",
            '${catalina.base}/shared/classes,${catalina.base}/shared/lib/*.jar')
    def output = new FileOutputStream("${env}/bin/apache-tomcat/conf/catalina.properties")
    catalinaProperties.store(output, "")
}

def updateCatalinaLogging(loggingPropertiesFile) {
    Properties engineServerProps = new Properties()
    engineServerProps.load(new FileInputStream(loggingPropertiesFile))
    engineServerProps.setProperty("1catalina.org.apache.juli.AsyncFileHandler.directory", '${catalina.logs}')
    engineServerProps.setProperty("2localhost.org.apache.juli.AsyncFileHandler.directory", '${catalina.logs}')
    engineServerProps.setProperty("3manager.org.apache.juli.AsyncFileHandler.directory", '${catalina.logs}')
    engineServerProps.setProperty("4host-manager.org.apache.juli.AsyncFileHandler.directory", '${catalina.logs}')
    def output = new FileOutputStream(loggingPropertiesFile)
    engineServerProps.store(output, "")
}

def addSolrIndexHome(solrServerConfig) {
    def contextConfig = new XmlParser().parse(solrServerConfig)
    if (contextConfig.str["@name=coreRootDirectory"].isEmpty()) {
        def node = new Node(contextConfig, 'str', [name: "coreRootDirectory"])
        node.setValue("\${crafter.solr.index:data/indexes}")
        def printer = new XmlNodePrinter(new PrintWriter(solrServerConfig))
        printer.preserveWhitespace = true
        printer.print(contextConfig)
    }
}

/**
 * Download Grape dependencies beforehand so that Groovy scripts can run without Internet connection. We do this by
 * calling the script with -h to just print the help info
 */
def downloadGrapes(binFolder, groovyScript) {
    exec {
        workingDir binFolder
        commandLine commandLinePrefix + [Paths.get("groovy", "bin", "groovy") as String, "-cp", binFolder,
          "-Dgrape.root=.", "-Dmode.downloadGrapesOnly=true", groovyScript]
    }
}
