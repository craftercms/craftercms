/*
 * Copyright (C) 2007-2019 Crafter Software Corporation. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import java.io.File
import java.nio.file.Paths
import java.util.Date
import org.apache.commons.codec.digest.DigestUtils
import org.apache.commons.io.FileUtils
import org.apache.commons.lang3.StringUtils
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
        classpath group: 'commons-codec', name: 'commons-codec', version: '1.11'
        classpath group: 'commons-io', name: 'commons-io', version: '2.6'
    }
}

def authTokens = [
  TOMCAT_HTTP_PORT     : String.valueOf(authTomcatPort),
  TOMCAT_HTTPS_PORT    : String.valueOf(authTomcatSSLPort),
  TOMCAT_AJP_PORT      : String.valueOf(authTomcatAJPPort),
  TOMCAT_SHUTDOWN_PORT : String.valueOf(authTomcatShutdownPort),
  TOMCAT_DEBUG_PORT    : String.valueOf(authTomcatDebugPort),
  SOLR_PORT            : String.valueOf(authSolrPort),
  SOLR_DEBUG_PORT      : String.valueOf(authSolrDebugPort),
  ES_PORT              : String.valueOf(authElasticsearchPort),
  DEPLOYER_PORT        : String.valueOf(authDeployerPort),
  DEPLOYER_DEBUG_PORT  : String.valueOf(authDeployerDebugPort),
  DEPLOYMENT_DIR       : String.valueOf(authDeploymentDir),
  MARIADB_PORT         : String.valueOf(authMariaDbPort),
  MONGODB_PORT         : String.valueOf(authMongoDBPort),
  ENV                  : "authoring",
  VERSION              : project.version,
  GIT_BUILD_ID         : gitRevisionId,
  SMTP_PORT            : String.valueOf(authSMTPPort)
]

def deliveryTokens = [
  TOMCAT_HTTP_PORT     : String.valueOf(deliveryTomcatPort),
  TOMCAT_HTTPS_PORT    : String.valueOf(deliveryTomcatSSLPort),
  TOMCAT_AJP_PORT      : String.valueOf(deliveryTomcatAJPPort),
  TOMCAT_SHUTDOWN_PORT : String.valueOf(deliveryTomcatShutdownPort),
  TOMCAT_DEBUG_PORT    : String.valueOf(deliveryTomcatDebugPort),
  SOLR_PORT            : String.valueOf(deliverySolrPort),
  SOLR_DEBUG_PORT      : String.valueOf(deliverySolrDebugPort),
  ES_PORT              : String.valueOf(deliveryElasticsearchPort),
  DEPLOYER_PORT        : String.valueOf(deliveryDeployerPort),
  DEPLOYER_DEBUG_PORT  : String.valueOf(deliveryDeployerDebugPort),
  DEPLOYMENT_DIR       : String.valueOf(deliveryDeploymentDir),
  MONGODB_PORT         : String.valueOf(deliveryMongoDBPort),
  ENV                  : "delivery",
  VERSION              : project.version,
  GIT_BUILD_ID         : gitRevisionId,
  SMTP_PORT            : String.valueOf(deliverySMTPPort)
]

// Files that should not be overwritten automatically
def configFilePatterns = [
    'bin/crafter-setenv\\.sh',
    'bin/apache-tomcat/conf/.+',
    'bin/apache-tomcat/shared/classes/.+',
    'bin/crafter-deployer/config/.+',
    'bin/crafter-deployer/logging\\.xml',
    'bin/elasticsearch/config/.+',
    'bin/solr/server/resources/.+',
    'bin/solr/server/solr/[^/]+',
    'bin/solr/server/solr/configsets/crafter_configs/.+'
]

task authoringPostEnvironment {
    description "Setups authoring environment"

    doLast {
        // Copy MariabDB4j jar for backup/restore
        copy {
            from "${downloadDir}/mariaDB4j-app-${mariadb4jVersion}.jar"
            into "${authEnvDir}/bin"
            rename "mariaDB4j-app-${mariadb4jVersion}.jar", 'mariaDB4j-app.jar'
        }

        exec {
            workingDir "${authEnvDir}/bin/apache-tomcat/bin"
            commandLine commandLinePrefix + ["chmod", "+x", "catalina.sh", "setenv.sh", "configtest.sh",
                                             "daemon.sh", "digest.sh", "setclasspath.sh", "shutdown.sh",
                                             "startup.sh", "tool-wrapper.sh", "version.sh"]
        }
        exec {
            workingDir "${authEnvDir}/bin/crafter-deployer"
            commandLine commandLinePrefix + ["chmod", "+x", "deployer.sh", "startup.sh", "shutdown.sh"]
        }
        exec {
            workingDir "${authEnvDir}/bin/migration"
            commandLine commandLinePrefix + ["chmod", "+x", "migrate.sh", "migrate-bg.sh", "import.sh",
                                             "import-bg.sh", "setenv.sh"]
        }
        exec {
            workingDir "${authEnvDir}/bin"
            commandLine commandLinePrefix + ["chmod", "+x", "crafter.sh", "startup.sh", "debug.sh", "shutdown.sh",
                                             "crafter-setenv.sh", "upgrade/start-upgrade.sh",
                                             "upgrade/upgrade-target.sh"]
        }

        downloadGrapes("${authEnvDir}/bin", "upgrade/start-upgrade.groovy")
        downloadGrapes("${authEnvDir}/bin", "upgrade/upgrade-target.groovy")
        downloadGrapes("${authEnvDir}/bin", "upgrade/post-upgrade.groovy")
    }
}

task deliveryPostEnvironment {
    description "Setups delivery environment"

    doLast {
        exec {
            workingDir "${deliveryEnvDir}/bin/apache-tomcat/bin/"
            commandLine commandLinePrefix + ["chmod", "+x", "catalina.sh", "setenv.sh", "configtest.sh",
                                             "daemon.sh", "digest.sh", "setclasspath.sh", "shutdown.sh",
                                             "startup.sh", "tool-wrapper.sh", "version.sh"]
        }
        exec {
            workingDir "${deliveryEnvDir}/bin/crafter-deployer/"
            commandLine commandLinePrefix + ["chmod", "+x", "deployer.sh", "startup.sh", "shutdown.sh"]
        }
        exec {
            workingDir "${deliveryEnvDir}/bin"
            commandLine commandLinePrefix + ["chmod", "+x", "crafter.sh", "startup.sh", "debug.sh", "shutdown.sh",
                                             "crafter-setenv.sh", "init-site.sh", "remove-site.sh",
                                             "upgrade/start-upgrade.sh", "upgrade/upgrade-target.sh"]
        }

        downloadGrapes("${deliveryEnvDir}/bin", "init-site.groovy")
        downloadGrapes("${deliveryEnvDir}/bin", "remove-site.groovy")
        downloadGrapes("${deliveryEnvDir}/bin", "upgrade/start-upgrade.groovy")
        downloadGrapes("${deliveryEnvDir}/bin", "upgrade/upgrade-target.groovy")
        downloadGrapes("${deliveryEnvDir}/bin", "upgrade/post-upgrade.groovy")
    }
}

def envs = []
if (getEnv().equalsIgnoreCase("all")) {
    envs = ["authoring", "delivery"]
} else {
    envs = [getEnv()]
}

envs.each { env ->
    if (!tasks.findByName("${env}Environment")) {
        task "${env}Environment" doLast {
            description "Setups ${env} environment"

            def envDir = env.equalsIgnoreCase("authoring") ? "${authEnvDir}" : "${deliveryEnvDir}"
            def tokens = env.equalsIgnoreCase("authoring") ? authTokens : deliveryTokens
            def newEnv
            def resourcesDestDir

            // Build env bin dir if it doesn't exist
            if (!file("${envDir}/bin").exists()) {
                println "Building bin directory @ ${envDir}"

                // Copy Groovy binaries
                copy {
                    from "${downloadDir}/groovy-${groovyVersion}"
                    into "${envDir}/bin/groovy"
                }

                // Copy Tomcat binaries
                copy {
                    from "${downloadDir}/apache-tomcat-${tomcatVersion}"
                    into "${envDir}/bin/apache-tomcat"
                    exclude "**/webapps/**"
                }
                file("${envDir}/bin/apache-tomcat/shared/lib").mkdirs()
                file("${envDir}/bin/apache-tomcat/webapps").mkdirs()

                //  Copy Solr binaries
                copy {
                    from "${downloadDir}/solr-${solrVersion}"
                    into "${envDir}/bin/solr"
                }

                // Copy Elastic Search binaries
                copy {
                    from "${downloadDir}/elasticsearch-${elasticsearchVersion}"
                    into "${envDir}/bin/elasticsearch"
                }

                // Copy Deployer README.md
                copy {
                    from "./src/deployer/README.md"
                    into "${envDir}/bin/crafter-deployer"
                }

                // Copy Studio README.md
                copy {
                    from "./src/studio/README.md"
                    into "${envDir}/bin/apache-tomcat"
                }

                // Copy Crafter CMS README.txt and LICENSE
                copy {
                    from "./resources/LICENSE"
                    from "./resources/README.txt"
                    into "${envDir}"
                }

                // It's a new env so copy resources directly
                newEnv = true
                resourcesDestDir = envDir
            } else {
                // Copy resources to a temp folder to do a sync later
                newEnv = false
                resourcesDestDir = env.equalsIgnoreCase("authoring") ? authProcessedResourcesDir : deliveryProcessedResourcesDir

                delete resourcesDestDir
                mkdir resourcesDestDir
            }

            println "Processing and copying resources to ${resourcesDestDir}..."

            // Copy Deployer config
            copy {
                from "./resources/deployer"
                into "${resourcesDestDir}/bin/crafter-deployer"
                filter(ReplaceTokens, tokens: tokens)
            }

            // Copy bin scripts
            copy {
                from "./resources/bin"
                into "${resourcesDestDir}/bin"
                filter(ReplaceTokens, tokens: tokens)
            }

            // Copy env specific bin scripts
            copy {
                from "./resources/env/${env}/bin"
                into "${resourcesDestDir}/bin"
                filter(ReplaceTokens, tokens: tokens)
            }

            // Copy Tomcat setenv
            copy {
                from "./resources/env/${env}/tomcat-config/setenv.sh"
                into "${resourcesDestDir}/bin/apache-tomcat/bin"
            }

            // Copy Tomcat shared conf
            copy {
                from "./resources/env/${env}/tomcat-config/crafter"
                into "${resourcesDestDir}/bin/apache-tomcat/shared/classes/crafter"
                filter(ReplaceTokens, tokens: tokens)
            }

            // Copy Crafter-specific Solr configsets
            copy {
                from "./src/search/crafter-search-solr-provider/solr/configsets"
                into "${resourcesDestDir}/bin/solr/server/solr/configsets"
            }

            // Copy stock Tomcat config that needs to be updated
            copy {
                from "${downloadDir}/apache-tomcat-${tomcatVersion}/conf/server.xml",
                     "${downloadDir}/apache-tomcat-${tomcatVersion}/conf/context.xml",
                     "${downloadDir}/apache-tomcat-${tomcatVersion}/conf/web.xml",
                     "${downloadDir}/apache-tomcat-${tomcatVersion}/conf/catalina.properties",
                     "${downloadDir}/apache-tomcat-${tomcatVersion}/conf/logging.properties"
                into "${resourcesDestDir}/bin/apache-tomcat/conf"
            }

            // Copy file to hide Tomcat version
            copy {
              from "resources/tomcat/ServerInfo.properties"
              into "${resourcesDestDir}/bin/apache-tomcat/lib/org/apache/catalina/util/"
            }

            // Copy stock Solr config that needs to be updated
            copy {
                from "${downloadDir}/solr-${solrVersion}/server/solr/solr.xml"
                into "${resourcesDestDir}/bin/solr/server/solr"
            }

            // Copy stock Elasticsearch config that needs to be updated
            copy {
                from "${downloadDir}/elasticsearch-${elasticsearchVersion}/config/elasticsearch.yml"
                into "${resourcesDestDir}/bin/elasticsearch/config"
            }

            // Update config
            updateTomcatServerConf("${resourcesDestDir}/bin/apache-tomcat/conf/server.xml")
            updateTomcatContext("${resourcesDestDir}/bin/apache-tomcat/conf/context.xml")
            updateTomcatWebConf("${resourcesDestDir}/bin/apache-tomcat/conf/web.xml")
            updateCatalinaProperties("${resourcesDestDir}/bin/apache-tomcat/conf/catalina.properties")
            updateCatalinaLogging("${resourcesDestDir}/bin/apache-tomcat/conf/logging.properties")
            updateSolrConf("${resourcesDestDir}/bin/solr/server/solr/solr.xml")
            updateElasticsearchConf("${resourcesDestDir}/bin/elasticsearch/config/elasticsearch.yml")

            // Only sync resource files if it's not a new env
            if (!newEnv) {
                def syncSrcDir = file(resourcesDestDir)
                def syncDestDir = env.equalsIgnoreCase("authoring") ? file(authEnvDir) : file(deliveryEnvDir)

                println "Synching processed resources from ${syncSrcDir} to ${syncDestDir}..."

                def resourceFiles = fileTree(syncSrcDir).each { file ->
                    if (!file.directory) {
                        def path = StringUtils.substringAfter(file.path, "${syncSrcDir.path}/")

                        syncFile(syncSrcDir, syncDestDir, path, configFilePatterns)
                    }
                }

                // Clean up resourcesDestDir
                delete resourcesDestDir
            }
        }
    }

    tasks.findByName("${env}Environment").finalizedBy("${env}PostEnvironment")
}

def updateTomcatServerConf(configFile) {
    def file = new File(configFile)
    def content = file.text

    // Replace ports
    content = content.replace('8005', '${tomcat.shutdown.port}')
    content = content.replace('8080', '${tomcat.http.port}')
    content = content.replace('8009', '${tomcat.ajp.port}')
    content = content.replace('8443', '${tomcat.https.port}')
    content = content.replace('protocol="HTTP/1.1"', 'protocol="HTTP/1.1" URIEncoding="UTF-8"')
    content = content.replace('protocol="AJP/1.3"', 'protocol="AJP/1.3" URIEncoding="UTF-8"')

    // Replace log folder
    content = content.replace('logs', '${catalina.logs}')

    file.write(content)
}

def updateTomcatContext(configFile) {
    def file = new File(configFile)
    def content = file.text

    content = content.replace('<WatchedResource>${catalina.base}/conf/web.xml</WatchedResource>',
        '<WatchedResource>${catalina.base}/conf/web.xml</WatchedResource>' + System.lineSeparator() +
        '    <Resources cachingAllowed="true" cacheMaxSize="100000"/>')

    file.write(content)
}

def updateTomcatWebConf(configFile) {
    def file = new File(configFile)
    def content = file.text
    def xml = new XmlParser(false, true).parseText(content)

    def mimeTypeNode = new NodeBuilder().'mime-mapping'() {
        extension('tmpl')
        'mime-type'('text/html')
    }
    xml.append(mimeTypeNode)

    file.write(groovy.xml.XmlUtil.serialize(xml))
}

def updateCatalinaProperties(configFile) {
    def file = new File(configFile)
    def content = file.text

    content = content.replace('shared.loader=',
        'shared.loader=${catalina.base}/shared/classes,${catalina.base}/shared/lib/*.jar')

    file.write(content)
}

def updateCatalinaLogging(configFile) {
    def file = new File(configFile)
    def content = file.text

    content = content.replace('${catalina.base}/logs', '${catalina.logs}')

    file.write(content)
}

def updateSolrConf(configFile) {
    def file = new File(configFile)
    def content = file.text

    content = content.replace('</solr>',
        '  <str name="coreRootDirectory">${crafter.solr.index:data/indexes}</str>' + System.lineSeparator() +
        '</solr>')

    file.write(content)
}

def updateElasticsearchConf(configFile) {
    def file = new File(configFile)

    def content = file.text
    content = content.replace("#path.data: /path/to/data", 'path.data: ${ES_INDEXES_DIR}')
    content = content.replace("#path.logs: /path/to/logs", 'path.logs: ${ES_LOGS_DIR}')
    content = content.replace("#http.port: 9200", 'http.port: ${ES_PORT}')
    content = content.replace(
        '#discovery.zen.ping.unicast.hosts',
        System.lineSeparator() +
        '# Disable cluster discovery' + System.lineSeparator() +
        'discovery.type: single-node' + System.lineSeparator() + System.lineSeparator() +
        '#discovery.zen.ping.unicast.hosts'
    )

    file.write(content)
}

def syncFile(srcDir, destDir, filePath, configFilePatterns) {
    def srcFile = new File(srcDir, filePath)
    def destFile = new File(destDir, filePath)

    if (!srcFile.hidden) {
        if (destFile.exists()) {
            if (isConfigFile(filePath, configFilePatterns)) {
                def srcMd5 = DigestUtils.md5Hex(srcFile.newInputStream())
                def destMd5 = DigestUtils.md5Hex(destFile.newInputStream())

                if (srcMd5 != destMd5) {
                    if (backupAndReplaceConfig) {
                        def now = new Date()
                        def backupTimestamp = now.format("yyyyMMddHHmmss")
                        def backupFile = new File(destDir, "${filePath}.bak.${backupTimestamp}")

                        println "Config file ${filePath} is different in src and dest. Backing up dest file to " +
                                "${backupFile.name} and replacing it with src file (backupAndReplaceConfig = true)"

                        FileUtils.moveFile(destFile, backupFile)
                        FileUtils.copyFile(srcFile, destFile)
                    } else if (overwriteConfig) {
                        println "Config file ${filePath} is different in src and dest. Overwriting dest file with " +
                                "src file (overwriteConfig = true)"

                        FileUtils.copyFile(srcFile, destFile)
                    } else {
                        println "Config file ${filePath} is different in src and dest. Keeping file in dest " +
                                "(backupAndReplaceConfig = true && overwriteConfig = false)"
                    }
                }
            } else {
                println "Copying over ${filePath} from src to dest (replacing non-config file)"

                FileUtils.copyFile(srcFile, destFile)
            }
        } else {
            println "Copying over ${filePath} from src to dest (new file)"

            FileUtils.copyFile(srcFile, destFile)
        }
    }
}

def isConfigFile(path, configFilePatterns) {
    return configFilePatterns.any { path.matches(it) }
}

/**
 * Download Grape dependencies beforehand so that Groovy scripts can run without Internet connection. We do this by
 * calling the script with -h to just print the help info
 */
def downloadGrapes(binFolder, groovyScript) {
    exec {
        workingDir binFolder
        commandLine commandLinePrefix + [Paths.get("groovy", "bin", "groovy") as String, "-cp", binFolder,
            "-Dgrape.root=.", "-Dmode.downloadGrapesOnly=true", groovyScript]
    }
}
