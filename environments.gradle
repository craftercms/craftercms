/*
 * Copyright (C) 2007-2022 Crafter Software Corporation. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
	repositories {
        mavenCentral()
	}
	dependencies {
		classpath project.property("grgit.version")
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
import org.ajoberstar.grgit.Grgit
import org.apache.commons.lang3.SystemUtils

apply from: "commons.gradle"

ext.environments = ["authoring", "delivery"]

ext {
    git = org.ajoberstar.grgit.Grgit.open(dir: "${projectDir}")
	gitRevisionId = git.head().id.substring(0, 6)
}

ext.commonFoldersToCreate = [
    "/bin",
    "/bin/apache-tomcat/shared/lib",
    "/bin/apache-tomcat/webapps",
    "/bin/apache-tomcat/lib/org/apache/catalina/util/",
    "/bin/opensearch/logs",
    "/data"
]

ext.hostsToScan = [
    [
        name: 'Github',
        host: 'github.com'
    ],
    [
        name: 'Gitlab',
        host: 'gitlab.com'
    ],
    [
        name: 'Bitbucket',
        host: 'bitbucket.org'
    ]
]

ext.authoringFoldersToCreate = [
]

ext.deliveryFoldersToCreate = [
]

ext.commonItemsToCopy = [
    [
        name: "groovy",
        from: "${downloadDir}/groovy-${groovyVersion}/",
        into: "/bin/groovy/",
        exclude: ""
    ],
    [
        name: "tomcat",
        from:"${downloadDir}/apache-tomcat-${tomcatVersion}/",
        into: "/bin/apache-tomcat/",
        exclude: "**/webapps/**"
    ],
    [
        name: "tomcat_info",
        from: "${projectDir}/resources/tomcat/ServerInfo.properties",    // Hides tomcat version
        into: "/bin/apache-tomcat/lib/org/apache/catalina/util/",
        exclude: ""
    ],
    [
        name: "opensearch",
        from: "${downloadDir}/opensearch-${openSearchVersion}/",
        into: "/bin/opensearch/",
        exclude: ""
    ],
    [
        name: "mongodb",
        from: "${downloadDir}/mongodb-${mongodbPlatform}-x86_64-${mongodbVersion}/",
        into: "/bin/mongodb/",
        exclude: ""
    ],
    [
        name: "license",
        from: "${projectDir}/resources/LICENSE",
        into: "/",
        exclude: ""
    ],
    [
        name: "ssh",
        from: "${projectDir}/resources/ssh",
        into: "/data/",
        exclude: ""
    ]
]

ext.authoringItemsToCopy = [
    [
        name: "mariadb",
        from: "${downloadDir}/mariaDB4j-app.jar",
        into: "/bin",
        exclude: ""
    ],
    [
        name: "setenv",
        from: "${projectDir}/resources/env/authoring/tomcat-config/setenv.sh",
        into: "/bin/apache-tomcat/bin/",
        exclude: ""
    ]
]

ext.deliveryItemsToCopy = [
    [
        name: "setenv",
        from: "${projectDir}/resources/env/delivery/tomcat-config/setenv.sh",
        into: "/bin/apache-tomcat/bin/",
        exclude: ""
    ]
]

ext.commonGrapesDownloads = [
    ["groovy/bin/groovy", "-cp", "${projectDir}/resources/bin", "-Dgrape.root=.", "-Dmode.downloadGrapesOnly=true",
        "${projectDir}/resources/bin/upgrade/start-upgrade.groovy"],
    ["groovy/bin/groovy", "-cp", "${projectDir}/resources/bin", "-Dgrape.root=.", "-Dmode.downloadGrapesOnly=true",
        "${projectDir}/resources/bin/upgrade/upgrade-target.groovy"],
    ["groovy/bin/groovy", "-cp", "${projectDir}/resources/bin", "-Dgrape.root=.", "-Dmode.downloadGrapesOnly=true",
        "${projectDir}/resources/bin/upgrade/post-upgrade.groovy"]
]

ext.authoringGrapesDownloads = [
]

ext.deliveryGrapesDownloads = [
    ["groovy/bin/groovy", "-cp", "${projectDir}/resources/bin", "-Dgrape.root=.", "-Dmode.downloadGrapesOnly=true",
        "${projectDir}/resources/env/delivery/bin/init-site.groovy"],
    ["groovy/bin/groovy", "-cp", "${projectDir}/resources/bin", "-Dgrape.root=.", "-Dmode.downloadGrapesOnly=true",
        "${projectDir}/resources/env/delivery/bin/remove-site.groovy"]
]

ext.commonUpdatePermissions = [
    [
        items: [
            "/apache-tomcat/bin/catalina.sh",
            "/apache-tomcat/bin/configtest.sh",
            "/apache-tomcat/bin/daemon.sh",
            "/apache-tomcat/bin/digest.sh",
            "/apache-tomcat/bin/setclasspath.sh",
            "/apache-tomcat/bin/shutdown.sh",
            "/apache-tomcat/bin/startup.sh",
            "/apache-tomcat/bin/tool-wrapper.sh",
            "/apache-tomcat/bin/version.sh",
        ],
        permissions: [
            "+x"
        ]
    ],
    [
        items: [
            "/opensearch/bin/",
            "/opensearch/modules"
        ],
        permissions: [
            "-R",
            "+x"
        ]
    ]
]

ext.authoringUpdatePermissions = [
    [
        items: [
            "/apache-tomcat/bin/setenv.sh",
            "/crafter-deployer/deployer.sh",
            "/crafter-deployer/startup.sh",
            "/crafter-deployer/shutdown.sh",
            "/crafter.sh",
            "/wait-for-it.sh",
            "/startup.sh",
            "/debug.sh",
            "/shutdown.sh",
            "/crafter-setenv.sh",
            "/upgrade/start-upgrade.sh",
            "/upgrade/upgrade-target.sh"
        ],
        permissions: [
            "+x"
        ]
    ]
]

ext.deliveryUpdatePermissions = [
    [
        items: [
            "/apache-tomcat/bin/setenv.sh",
            "/crafter-deployer/deployer.sh",
            "/crafter-deployer/startup.sh",
            "/crafter-deployer/shutdown.sh",
            "/crafter.sh",
            "/wait-for-it.sh",
            "/remove-site.sh",
            "/startup.sh",
            "/debug.sh",
            "/shutdown.sh",
            "/crafter-setenv.sh",
            "/upgrade/start-upgrade.sh",
            "/upgrade/upgrade-target.sh"
        ],
        permissions: [
            "+x"
        ]
    ]
]

ext.commonConfUpdatePatterns = [
    [
        confFile: "/bin/apache-tomcat/conf/server.xml",
        patterns: [
            [
                match: 'protocol="HTTP/1.1"',
                replace: 'protocol="HTTP/1.1" URIEncoding="UTF-8"'
            ],
            [
                match: 'protocol="AJP/1.3"',
                replace: 'protocol="AJP/1.3" URIEncoding="UTF-8"'
            ],
            [
                match: 'logs',
                replace: '${catalina.logs}'
            ]
        ]
    ],
    [
        confFile: "/bin/apache-tomcat/conf/context.xml",
        patterns: [
            [
                match: '<WatchedResource>${catalina.base}/conf/web.xml</WatchedResource>',
                replace: '<WatchedResource>${catalina.base}/conf/web.xml</WatchedResource>' + System.lineSeparator() +
                        '    <Resources cachingAllowed="true" cacheMaxSize="100000"/>'
            ]
        ]
    ],
    [
        confFile: "/bin/apache-tomcat/conf/catalina.properties",
        patterns: [
            [
                match: 'shared.loader=', 
                replace: 'shared.loader=${catalina.base}/shared/classes,${catalina.base}/shared/lib/*.jar'
            ]
        ]
    ],
    [
        confFile: "/bin/apache-tomcat/conf/logging.properties",
        patterns: [
            [
                match: '${catalina.base}/logs',
                replace: '${catalina.logs}'
            ]
        ]
    ],
    [
        confFile: "/bin/opensearch/config/opensearch.yml",
        patterns: [
            [
                match: "#path.data: /path/to/data",
                replace: 'path.data: ${ES_INDEXES_DIR}'
            ],
            [
                match: "#path.logs: /path/to/logs",
                replace: 'path.logs: ${ES_LOGS_DIR}'
            ],
            [
                match: "#http.port: 9200",
                replace: 'http.port: ${ES_PORT}'
            ],
            [
                match: '# --------------------------------- Discovery ----------------------------------',
                replace: System.lineSeparator() + 
                    '# Disable cluster discovery' + System.lineSeparator() +
                    'discovery.type: single-node' + System.lineSeparator() + System.lineSeparator() +
                    '# ---------------------------------- Gateway -----------------------------------'
            ],
            [
                match: '# ---------------------------------- Various -----------------------------------',
                replace: '# ---------------------------------- Various -----------------------------------' +
                        System.lineSeparator() +
                        'plugins.security.disabled: true' + System.lineSeparator()
            ]
        ]
    ],
    [
            confFile: "/bin/opensearch/config/jvm.options",
            patterns: [
                    [
                            match: "-Xm",
                            replace: '#-Xm'
                    ]
            ]
    ]
]

ext.authoringConfUpdatePatterns = [
    [
        confFile: "/bin/apache-tomcat/conf/server.xml",
        patterns: [
            [
                match: "8005",
                replace: "${authoringTomcatShutdownPort}"
            ],
            [
                match: "8080",
                replace: "${authoringTomcatHttpPort}"
            ],
            [
                match: "8009",
                replace: "${authoringTomcatAjpPort}"
            ],
            [
                match: "8443",
                replace: "${authoringTomcatHttpsPort}"
            ],
            [
                match: "8000",
                replace: "${authoringTomcatDebugPort}"
            ]
        ]
    ]
]

ext.deliveryConfUpdatePatterns = [
    [
        confFile: "/bin/apache-tomcat/conf/server.xml",
        patterns: [
            [
                match: "8005",
                replace: "${deliveryTomcatShutdownPort}"
            ],
            [
                match: "8080",
                replace: "${deliveryTomcatHttpPort}"
            ],
            [
                match: "8009",
                replace: "${deliveryTomcatAjpPort}"
            ],
            [
                match: "8443",
                replace: "${deliveryTomcatHttpsPort}"
            ],
            [
                match: "8000",
                replace: "${deliveryTomcatDebugPort}"
            ]
        ]
    ]
]

def authoringTokens = [
  TOMCAT_HTTP_PORT     : String.valueOf(authoringTomcatHttpPortDefault),
  TOMCAT_HTTPS_PORT    : String.valueOf(authoringTomcatHttpsPortDefault),
  TOMCAT_AJP_PORT      : String.valueOf(authoringTomcatAjpPortDefault),
  TOMCAT_SHUTDOWN_PORT : String.valueOf(authoringTomcatShutdownPortDefault),
  TOMCAT_DEBUG_PORT    : String.valueOf(authoringTomcatDebugPortDefault),
  ES_PORT              : String.valueOf(authoringOpenSearchPort),
  DEPLOYER_PORT        : String.valueOf(authoringDeployerPort),
  DEPLOYER_DEBUG_PORT  : String.valueOf(authoringDeployerDebugPort),
  DEPLOYMENT_DIR       : String.valueOf(authoringDeploymentDir),
  MARIADB_PORT         : String.valueOf(authoringMariaDbPort),
  MONGODB_PORT         : String.valueOf(authoringMongoDbPort),
  ENV                  : "authoring",
  VERSION              : project.version,
  GIT_BUILD_ID         : gitRevisionId,
  SMTP_PORT            : String.valueOf(authoringSmtpPort)
]

def deliveryTokens = [
  TOMCAT_HTTP_PORT     : String.valueOf(deliveryTomcatHttpPortDefault),
  TOMCAT_HTTPS_PORT    : String.valueOf(deliveryTomcatHttpsPortDefault),
  TOMCAT_AJP_PORT      : String.valueOf(deliveryTomcatAjpPortDefault),
  TOMCAT_SHUTDOWN_PORT : String.valueOf(deliveryTomcatShutdownPortDefault),
  TOMCAT_DEBUG_PORT    : String.valueOf(deliveryTomcatDebugPortDefault),
  ES_PORT              : String.valueOf(deliveryOpenSearchPort),
  DEPLOYER_PORT        : String.valueOf(deliveryDeployerPort),
  DEPLOYER_DEBUG_PORT  : String.valueOf(deliveryDeployerDebugPort),
  DEPLOYMENT_DIR       : String.valueOf(deliveryDeploymentDir),
  MONGODB_PORT         : String.valueOf(deliveryMongoDbPort),
  ENV                  : "delivery",
  VERSION              : project.version,
  GIT_BUILD_ID         : gitRevisionId,
  SMTP_PORT            : String.valueOf(deliverySmtpPort)
]

ext.getEnvironments = { ->
    String[] result;

    if (project.hasProperty("env"))
        result = project.property("env").toLowerCase().split(",")
    else
        result = environments;

    return result;
}

ext.prepareBaseEnvironment = { envFolder, overwriteChangedFiles, downloadGrapes, includeMongodb ->
    // Create require folders
    commonFoldersToCreate.each { folder ->
        file(envFolder + folder).mkdirs()
    }

    // Copy files into env
    commonItemsToCopy.each { item ->
        def name = item.name
        def from = item.from
        def into = item.into
        def exclude = item.exclude
        def performSync = true

        // Skip Profile if it's not required nor is Social required (since Social depends on Profile)
        if (name == "mongodb" && !includeMongodb) {
            performSync = false
        }

        if (performSync) {
            syncFolder("${projectDir}", from, envFolder + into, exclude, overwriteChangedFiles, true)
        }
    }

    // Download Grapes
    if (downloadGrapes) {
        commonGrapesDownloads.each() { grapes ->
            def command = grapes
            execCommand(command, envFolder + "/bin/")
        }
    }

    commonUpdatePermissions.each { group ->
        def command = ["chmod"]
        group['permissions'].each { permission ->
            command << permission
        }
        group['items'].each { item ->
            command << "bin" + item
        }
        execCommand(command, envFolder)
    }

    // Update configuration files
	commonConfUpdatePatterns.each { conf ->
		updateConfFile(envFolder + conf['confFile'], conf['patterns'])
	}

    // Update known_hosts
    updateKnownHosts(envFolder)
}

ext.prepareAuthoringEnvironment = { overwriteChangedFiles, downloadGrapes, includeMongodb ->
    // Prepare the base
    prepareBaseEnvironment("${authoringEnvDir}", overwriteChangedFiles, downloadGrapes, includeMongodb)

    authoringFoldersToCreate.each { folder ->
        file("${authoringEnvDir}" + folder).mkdirs()
    }

    // Copy files into env
    authoringItemsToCopy.each { item ->
        def from = item.from
        def into = item.into
        def exclude = item.exclude
        syncFolder("${projectDir}", from, "${authoringEnvDir}" + into, exclude, overwriteChangedFiles, true)
    }

    // Copy Deployer config
    copy {
        from "./resources/deployer"
        into "${authoringEnvDir}/bin/crafter-deployer"
        filter(ReplaceTokens, tokens: authoringTokens)
    }

    // Copy bin scripts
    copy {
        from "${projectDir}/resources/bin"
        into "${authoringEnvDir}/bin"
        filter(ReplaceTokens, tokens: authoringTokens)
    }

    // Copy env specific bin scripts
    copy {
        from "./resources/env/authoring/bin"
        into "${authoringEnvDir}/bin"
        filter(ReplaceTokens, tokens: authoringTokens)
    }

    // Copy Tomcat shared conf
    copy {
        from "./resources/env/authoring/tomcat-config/crafter"
        into "${authoringEnvDir}/bin/apache-tomcat/shared/classes/crafter"
        filter(ReplaceTokens, tokens: authoringTokens)
    }

    // Download Grapes
    if (downloadGrapes) {
        authoringGrapesDownloads.each() { grapes ->
            def command = grapes
            execCommand(command, "${authoringEnvDir}" + "/bin/")
        }
    }

    authoringUpdatePermissions.each { group ->
        def command = ["chmod"]
        group['permissions'].each { permission ->
            command << permission
        }
        group['items'].each { item ->
            command << "bin" + item
        }
        execCommand(command, "${authoringEnvDir}")
    }

    // Update configuration files
	authoringConfUpdatePatterns.each { conf ->
		updateConfFile("${authoringEnvDir}" + conf['confFile'], conf['patterns'])
	}
}

ext.prepareDeliveryEnvironment = { overwriteChangedFiles, downloadGrapes, includeMongodb ->
    // Prepare the base
    prepareBaseEnvironment("${deliveryEnvDir}", overwriteChangedFiles, downloadGrapes, includeMongodb)

    deliveryFoldersToCreate.each { folder ->
        file("${deliveryEnvDir}" + folder).mkdirs()
    }

    // Copy files into env
    deliveryItemsToCopy.each { item ->
        def from = item.from
        def into = item.into
        def exclude = item.exclude
        syncFolder("${projectDir}", from, "${deliveryEnvDir}" + into, exclude, overwriteChangedFiles, true)
    }

    // Copy Deployer config
    copy {
        from "./resources/deployer"
        into "${deliveryEnvDir}/bin/crafter-deployer"
        filter(ReplaceTokens, tokens: deliveryTokens)
    }

    // Copy bin scripts
    copy {
        from "${projectDir}/resources/bin"
        into "${deliveryEnvDir}/bin"
        filter(ReplaceTokens, tokens: deliveryTokens)
    }

    // Copy env specific bin scripts
    copy {
        from "./resources/env/delivery/bin"
        into "${deliveryEnvDir}/bin"
        filter(ReplaceTokens, tokens: deliveryTokens)
    }

    // Copy Tomcat shared conf
    copy {
        from "./resources/env/delivery/tomcat-config/crafter"
        into "${deliveryEnvDir}/bin/apache-tomcat/shared/classes/crafter"
        filter(ReplaceTokens, tokens: deliveryTokens)
    }

    // Download Grapes
    if (downloadGrapes) {
        deliveryGrapesDownloads.each() { grapes ->
            def command = grapes
            execCommand(command, "${deliveryEnvDir}" + "/bin/")
        }
    }

    deliveryUpdatePermissions.each { group ->
        def command = ["chmod"]
        group['permissions'].each { permission ->
            command << permission
        }
        group['items'].each { item ->
            command << "bin" + item
        }
        execCommand(command, "${deliveryEnvDir}")
    }

    // Update configuration files
	deliveryConfUpdatePatterns.each { conf ->
		updateConfFile("${deliveryEnvDir}" + conf['confFile'], conf['patterns'])
	}
}

ext.prepareEnvironment = { environment, refreshEnv, overwriteChangedFiles, downloadGrapes, includeMongodb ->
    if (environment == "authoring") {
        if (!file("${authoringEnvDir}").exists() || refreshEnv) {
            prepareAuthoringEnvironment(overwriteChangedFiles, downloadGrapes, includeMongodb)
        }
    } else if (environment == "delivery") {
        if (!file("${deliveryEnvDir}").exists() || refreshEnv) {
            prepareDeliveryEnvironment(overwriteChangedFiles, downloadGrapes, includeMongodb)
        }
    } else {
        logger.error("Unknown environment \"" + environment + "\"")
        throw new GradleException("Unknown environment \"" + environment + "\"")
    }
}

ext.updateConfFile = { confFile, patterns ->
    def file = new File(confFile)
    def content = file.text

    // Replace patterns
    patterns.each { pattern ->
        content = content.replace(pattern.match, pattern.replace)
    }

    file.write(content)
}

ext.updateKnownHosts = { envDir ->
    def knownHostsFile = file("${envDir}/data/ssh/known_hosts")
    hostsToScan.each { entry ->
        knownHostsFile << "# ${entry.name}" << System.lineSeparator()
                       << "ssh-keyscan ${entry.host}".execute().getText() << System.lineSeparator()
    }
}
