import java.io.File
import java.nio.file.Paths
import org.apache.tools.ant.filters.ReplaceTokens

def authTokens = [
  TOMCAT_HTTP_PORT     : String.valueOf(authTomcatPort),
  TOMCAT_HTTPS_PORT    : String.valueOf(authTomcatSSLPort),
  TOMCAT_AJP_PORT      : String.valueOf(authTomcatAJPPort),
  TOMCAT_SHUTDOWN_PORT : String.valueOf(authTomcatShutdownPort),
  TOMCAT_DEBUG_PORT    : String.valueOf(authTomcatDebugPort),
  SOLR_PORT            : String.valueOf(authSolrPort),
  SOLR_DEBUG_PORT      : String.valueOf(authSolrDebugPort),
  ES_PORT              : String.valueOf(authElasticSearchPort),
  DEPLOYER_PORT        : String.valueOf(authDeployerPort),
  DEPLOYER_DEBUG_PORT  : String.valueOf(authDeployerDebugPort),
  DEPLOYMENT_DIR       : String.valueOf(authDeploymentDir),
  MARIADB_PORT         : String.valueOf(authMariaDbPort),
  MONGODB_PORT         : String.valueOf(authMongoDBPort),
  ENV                  : "authoring",
  VERSION              : project.version,
  GIT_BUILD_ID         : gitRevisionId,
  SMTP_PORT            : String.valueOf(authSMTPPort)
]

def deliveryTokens = [
  TOMCAT_HTTP_PORT     : String.valueOf(deliveryTomcatPort),
  TOMCAT_HTTPS_PORT    : String.valueOf(deliveryTomcatSSLPort),
  TOMCAT_AJP_PORT      : String.valueOf(deliveryTomcatAJPPort),
  TOMCAT_SHUTDOWN_PORT : String.valueOf(deliveryTomcatShutdownPort),
  TOMCAT_DEBUG_PORT    : String.valueOf(deliveryTomcatDebugPort),
  SOLR_PORT            : String.valueOf(deliverySolrPort),
  SOLR_DEBUG_PORT      : String.valueOf(deliverySolrDebugPort),
  ES_PORT              : String.valueOf(deliveryElasticSearchPort),
  DEPLOYER_PORT        : String.valueOf(deliveryDeployerPort),
  DEPLOYER_DEBUG_PORT  : String.valueOf(deliveryDeployerDebugPort),
  DEPLOYMENT_DIR       : String.valueOf(deliveryDeploymentDir),
  MONGODB_PORT         : String.valueOf(deliveryMongoDBPort),
  ENV                  : "delivery",
  VERSION              : project.version,
  GIT_BUILD_ID         : gitRevisionId,
  SMTP_PORT            : String.valueOf(deliverySMTPPort)
]

/**
 Setup environment
 **/
task("authoringPostEnvironment") {
    description "Setup the Crafter authoring environment"

    doLast {
        copy {
            from "./resources/tomcat-config-authoring/setenv.sh"
            from "./resources/tomcat-config-authoring/setenv.bat"
            into "${authEnvDir}/bin/apache-tomcat/bin"
            eachFile {
                if (it.relativePath.getFile(file("${authEnvDir}/bin/apache-tomcat/bin")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        copy {
            from "./resources/tomcat-config-authoring/catalina.policy"
            into "${authEnvDir}/bin/apache-tomcat/conf/"
        }

        copy {
            from "./resources/tomcat-config-authoring/crafter"
            into "${authEnvDir}/bin/apache-tomcat/shared/classes/crafter"
            filter(ReplaceTokens, tokens: authTokens)
            eachFile {
                if (it.relativePath.getFile(file("${authEnvDir}/bin/apache-tomcat/shared/classes/crafter")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        copy {
            from "./resources/deployer/"
            into "${authEnvDir}/bin/crafter-deployer"
            filter(ReplaceTokens, tokens: authTokens)
            eachFile {
                if (it.relativePath.getFile(file("${authEnvDir}/bin/crafter-deployer")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        copy {
            from "./resources/crafter/"
            into "${authEnvDir}/bin/"
            exclude "**/init-site.*"
            exclude "**/remove-site.*"
            exclude "**/*.delivery"
            rename '(.*).authoring', '$1'
            filter(ReplaceTokens, tokens: authTokens)
            eachFile {
                if (it.relativePath.getFile(file("${authEnvDir}/bin/")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        copy {
            from "./resources/migration"
            into "${authEnvDir}/bin/migration"
            filter(ReplaceTokens, tokens: authTokens)
            eachFile {
                if (it.relativePath.getFile(file("${authEnvDir}/bin/migration")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        if (!isWin) {
            exec {
                workingDir "${authEnvDir}/bin/apache-tomcat/bin/"
                commandLine commandLinePrefix + ["chmod", "+x", "catalina.sh", "setenv.sh", "configtest.sh", "daemon.sh",
                                                 "digest.sh", "setclasspath.sh", "shutdown.sh", "startup.sh", "tool-wrapper.sh",
                                                 "version.sh"]
            }
            exec {
                workingDir "${authEnvDir}/bin/crafter-deployer/"
                commandLine commandLinePrefix + ["chmod", "+x", "deployer.sh", "startup.sh", "shutdown.sh"]
            }
            exec {
                workingDir "${authEnvDir}/bin/migration"
                commandLine commandLinePrefix + ["chmod", "+x", "migrate.sh", "migrate-bg.sh", "import.sh",
                                                 "import-bg.sh", "setenv.sh"]
            }
            exec {
                workingDir "${authEnvDir}/bin"
                commandLine commandLinePrefix + ["chmod", "+x", "crafter.sh", "startup.sh", "debug.sh", "shutdown.sh",
                                                 "crafter-setenv.sh", "upgrade/start-upgrade.sh",
                                                 "upgrade/upgrade-target.sh"]
            }
        }

        updateCatalinaSettings(authEnvDir);
        updateTomcatPorts("${authEnvDir}/bin/apache-tomcat/conf/server.xml")
        updateTomcatContext("${authEnvDir}/bin/apache-tomcat/conf/context.xml")
        updateCatalinaLogging("${authEnvDir}/bin/apache-tomcat/conf/logging.properties")
        addSolrIndexHome("${authEnvDir}/bin/solr/server/solr/solr.xml")
        updateElasticSearchConf("${authEnvDir}/bin/elasticsearch/config/elasticsearch.yml")
        downloadGrapes("${authEnvDir}/bin", "upgrade/start-upgrade.groovy")
        downloadGrapes("${authEnvDir}/bin", "upgrade/upgrade-target.groovy")
    }
}

task("deliveryPostEnvironment") {
    description "Setup the Crafter CMS delivery environment"

    doLast {
        copy {
            from "./resources/tomcat-config-delivery/setenv.sh"
            from "./resources/tomcat-config-delivery/setenv.bat"
            into "${deliveryEnvDir}/bin/apache-tomcat/bin"
            eachFile {
                if (it.relativePath.getFile(file("${deliveryEnvDir}/bin/apache-tomcat/bin")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        copy {
            from "./resources/tomcat-config-delivery/catalina.policy"
            into "${deliveryEnvDir}/bin/apache-tomcat/conf/"
        }

        copy {
            from "./resources/tomcat-config-delivery/crafter"
            into "${deliveryEnvDir}/bin/apache-tomcat/shared/classes/crafter"
            filter(ReplaceTokens, tokens: deliveryTokens)
            eachFile {
                if (it.relativePath.getFile(file("${deliveryEnvDir}/bin/apache-tomcat/shared/classes/crafter")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        copy {
            from "./resources/deployer/"
            into "${deliveryEnvDir}/bin/crafter-deployer"
            filter(ReplaceTokens, tokens: deliveryTokens)
            eachFile {
                if (it.relativePath.getFile(file("${deliveryEnvDir}/bin/crafter-deployer")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }
        
        copy {
            from "./resources/crafter/"
            into "${deliveryEnvDir}/bin/"
            exclude "**/*.authoring"
            rename '(.*).delivery', '$1'
            filter(ReplaceTokens, tokens: deliveryTokens)
            eachFile {
                if (it.relativePath.getFile(file("${deliveryEnvDir}/bin/")).exists() && !forceDeploy) {
                    it.exclude()
                }
            }
        }

        if (!isWin) {
            exec {
                workingDir "${deliveryEnvDir}/bin/apache-tomcat/bin/"
                commandLine commandLinePrefix + ["chmod", "+x", "catalina.sh", "setenv.sh", "configtest.sh", "daemon.sh",
                                                 "digest.sh", "setclasspath.sh", "shutdown.sh", "startup.sh", "tool-wrapper.sh",
                                                 "version.sh"]
            }
            exec {
                workingDir "${deliveryEnvDir}/bin/crafter-deployer/"
                commandLine commandLinePrefix + ["chmod", "+x", "deployer.sh", "startup.sh", "shutdown.sh"]
            }
            exec {
                workingDir "${deliveryEnvDir}/bin"
                commandLine commandLinePrefix + ["chmod", "+x", "crafter.sh", "startup.sh", "debug.sh", "shutdown.sh",
                                                 "crafter-setenv.sh", "init-site.sh", "remove-site.sh",
                                                 "upgrade/start-upgrade.sh", "upgrade/upgrade-target.sh"]
            }
        }

        updateTomcatPorts("${deliveryEnvDir}/bin/apache-tomcat/conf/server.xml")
        updateCatalinaSettings(deliveryEnvDir)
        updateTomcatContext("${deliveryEnvDir}/bin/apache-tomcat/conf/context.xml")
        updateCatalinaLogging("${deliveryEnvDir}/bin/apache-tomcat/conf/logging.properties")
        addSolrIndexHome("${deliveryEnvDir}/bin/solr/server/solr/solr.xml")
        updateElasticSearchConf("${deliveryEnvDir}/bin/elasticsearch/config/elasticsearch.yml")
        downloadGrapes("${deliveryEnvDir}/bin", "init-site.groovy")
        downloadGrapes("${deliveryEnvDir}/bin", "remove-site.groovy")
        downloadGrapes("${deliveryEnvDir}/bin", "upgrade/start-upgrade.groovy")
        downloadGrapes("${deliveryEnvDir}/bin", "upgrade/upgrade-target.groovy")
    }
}


def envs = []
if (getEnv().equalsIgnoreCase("all")) {
    envs = ["authoring", "delivery"]
} else {
    envs = [getEnv()]
}

envs.each { env ->
    if (!tasks.findByName("${env}Environment")) {
        task "${env}Environment" doLast {
            description "Setup the Crafter ${env} environment"
            def path = env.equalsIgnoreCase("authoring") ? "${authEnvDir}" : "${deliveryEnvDir}"

            if (!file("${path}/bin/groovy").exists()) {
                copy {
                    from zipTree(downloadDir + "/apache-groovy-${groovyVersion}.zip")
                    into "${path}/bin"
                }
                file("${path}/bin/groovy-${groovyVersion}").renameTo(file("${path}/bin/groovy"))
            }

            if (!file("${path}/bin/apache-tomcat").exists()) {
                copy {
                    from zipTree(downloadDir + "/apache-tomcat-${tomcatVersion}.zip")
                    into "${path}/bin"
                    exclude "**/webapps/**"
                }
                file("${path}/bin/apache-tomcat-${tomcatVersion}").renameTo(file("${path}/bin/apache-tomcat"))
                file("${path}/bin/apache-tomcat/shared/lib").mkdirs()
            }

            if (!file("${path}/bin/solr").exists()) {
                copy {
                    from zipTree(downloadDir + "/solr-${solrVersion}.zip")
                    into "${path}/bin"
                }
                file("${path}/bin/solr-${solrVersion}").renameTo(file("${path}/bin/solr"))
            }

            copy {
                from "./src/search/crafter-search-solr-provider/solr/configsets"
                into "${path}/bin/solr/server/solr/configsets"
                eachFile {
                    if (it.relativePath.getFile(file("${path}/bin/solr/server/solr/configsets")).exists() && !forceDeploy) {
                        it.exclude()
                    }
                }
            }

            if (!file("${path}/bin/elasticsearch").exists()) {
                copy {
                    from zipTree(downloadDir + "/elasticsearch-${elasticSearchVersion}.zip")
                    into "${path}/bin"
                }
                file("${path}/bin/elasticsearch-${elasticSearchVersion}").renameTo(file("${path}/bin/elasticsearch"))
            }

            copy {
              from "$downloadDir/mariaDB4j-app-${mariadb4jVersion}.jar"
              into "${path}/bin/"
            }
            file("${path}/bin/mariaDB4j-app-${mariadb4jVersion}.jar").renameTo(file("${path}/bin/mariaDB4j-app.jar"))

            /** Remove Non util stuff **/
            def webapps = file("${path}/bin/apache-tomcat/webapps/")
            if (!webapps.exists()) {
                webapps.mkdir()
            }

            copy {
                from "./src/deployer/README.md"
                into "${path}/bin/crafter-deployer/"
                eachFile {
                    if (it.relativePath.getFile(file("${path}/bin/crafter-deployer/")).exists() && !forceDeploy) {
                        it.exclude()
                    }
                }
            }

            copy {
                from "./src/studio/README.md"
                into "${path}/bin/apache-tomcat"
                eachFile {
                    if (it.relativePath.getFile(file("${path}/bin/apache-tomcat")).exists() && !forceDeploy) {
                        it.exclude()
                    }
                }
            }

            copy {
                from "./resources/LICENSE"
                from "./resources/README.txt"
                into "${path}/"
                eachFile {
                    if (it.relativePath.getFile(file("${path}/")).exists() && !forceDeploy) {
                        it.exclude()
                    }
                }
            }
        }
    }

    tasks.findByName("${env}Environment").finalizedBy("${env}PostEnvironment")
}

def updateTomcatPorts(serverConfigFile) {
    def serverConfig = new XmlParser().parse(serverConfigFile)
    serverConfig.@port = '${tomcat.shutdown.port}'
    serverConfig.Service.Connector.each {
        if (it.@protocol.equalsIgnoreCase("HTTP/1.1")) {
            it.@port = '${tomcat.http.port}'
            it.@redirectPort = '${tomcat.https.port}'
            it.@URIEncoding = "UTF-8"
        } else if (it.@protocol.equalsIgnoreCase("AJP/1.3")) {
            it.@port = '${tomcat.ajp.port}'
            it.@redirectPort = '${tomcat.https.port}'
            it.@URIEncoding = "UTF-8"
        }
    }
    def printer = new XmlNodePrinter(new PrintWriter(serverConfigFile))
    printer.preserveWhitespace = true
    printer.print(serverConfig)
}

def updateTomcatContext(serverConfigFile) {
    def contextConfig = new XmlParser().parse(serverConfigFile)
    new Node(contextConfig, 'Resources', [cachingAllowed: true, cacheMaxSize: 100000])
    def printer = new XmlNodePrinter(new PrintWriter(serverConfigFile))
    printer.preserveWhitespace = true
    printer.print(contextConfig)
}

def updateCatalinaSettings(env) {
    Properties catalinaProperties = new Properties()
    catalinaProperties.load(new FileInputStream("${env}/bin/apache-tomcat/conf/catalina.properties"))
    catalinaProperties.setProperty("shared.loader",
            '${catalina.base}/shared/classes,${catalina.base}/shared/lib/*.jar')
    def output = new FileOutputStream("${env}/bin/apache-tomcat/conf/catalina.properties")
    catalinaProperties.store(output, "")
}

def updateCatalinaLogging(loggingPropertiesFile) {
    Properties engineServerProps = new Properties()
    engineServerProps.load(new FileInputStream(loggingPropertiesFile))
    engineServerProps.setProperty("1catalina.org.apache.juli.AsyncFileHandler.directory", '${catalina.logs}')
    engineServerProps.setProperty("2localhost.org.apache.juli.AsyncFileHandler.directory", '${catalina.logs}')
    engineServerProps.setProperty("3manager.org.apache.juli.AsyncFileHandler.directory", '${catalina.logs}')
    engineServerProps.setProperty("4host-manager.org.apache.juli.AsyncFileHandler.directory", '${catalina.logs}')
    def output = new FileOutputStream(loggingPropertiesFile)
    engineServerProps.store(output, "")
}

def updateElasticSearchConf(configFile) {
  def file = new File(configFile)
  def content = file.text
  content = content.replace("#path.data: /path/to/data", 'path.data: ${ES_INDEXES_DIR}')
  content = content.replace("#path.logs: /path/to/logs", 'path.logs: ${ES_LOGS_DIR}')
  content = content.replace("#http.port: 9200", 'http.port: ${ES_PORT}')
  if(!content.contains('discovery.type')) {
    content = content.replace(
      '#discovery.zen.ping.unicast.hosts',
      System.lineSeparator() + 
      '# Disable cluster discovery' + System.lineSeparator() +
      'discovery.type: single-node' + System.lineSeparator() + System.lineSeparator() +
      '#discovery.zen.ping.unicast.hosts'
    )
  }
  file.write(content)
}

def addSolrIndexHome(solrServerConfig) {
    def contextConfig = new XmlParser().parse(solrServerConfig)
    if (contextConfig.str["@name=coreRootDirectory"].isEmpty()) {
        def node = new Node(contextConfig, 'str', [name: "coreRootDirectory"])
        node.setValue("\${crafter.solr.index:data/indexes}")
        def printer = new XmlNodePrinter(new PrintWriter(solrServerConfig))
        printer.preserveWhitespace = true
        printer.print(contextConfig)
    }
}

/**
 * Download Grape dependencies beforehand so that Groovy scripts can run without Internet connection. We do this by
 * calling the script with -h to just print the help info
 */
def downloadGrapes(binFolder, groovyScript) {
    exec {
        workingDir binFolder
        commandLine commandLinePrefix + [Paths.get("groovy", "bin", "groovy") as String, "-cp", binFolder,
          "-Dgrape.root=.", "-Dmode.downloadGrapesOnly=true", groovyScript]
    }
}
