/*
 * Copyright (C) 2007-2023 Crafter Software Corporation. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath group: 'org.apache.commons', name: 'commons-lang3', version: project.property('commons-lang3.version')
	}
}

import org.apache.commons.lang3.SystemUtils

ext.getPropertySafelyWithDefaults = {
	prop, propDefault ->

		project.ext.set("ret", project.hasProperty(prop) ? project.property(prop).toString() : propDefault)

		return ret
}

def commandTimeout = getPropertySafelyWithDefaults("commandTimeout", 1000000).toInteger()

ext.execDetermineLinuxOSWithVersion = {
	def os = new File('/etc/os-release').text.split('\n').find { it.startsWith('NAME=') }?.split('=')[1]
	def version = new File('/etc/os-release').text.split('\n').find { it.startsWith('VERSION_ID=') }?.split('=')[1]
	if (os == null || version == null) {
		println "Cannot determine the operating system."
		return "unsupportedOS"
	}

	version = version.replaceAll("\"", "").replaceAll("\'", "").replaceAll("\\.", "").trim()
	switch (os) {
		case ~/.*Ubuntu.*/:
			return "ubuntu${version}"
		case ~/.*Linux Mint.*/:
			def ubuntuVersion
			def releaseFile = new File('/etc/upstream-release/lsb-release')
			if (releaseFile.exists()) {
				ubuntuVersion = releaseFile.text.split('\n').find { it.startsWith('DISTRIB_RELEASE=') }?.split('=')[1]
			}
			if (ubuntuVersion == null) {
				// try best to manually map LinuxMint to Ubuntu version
				if (version.startsWith("19")) {
					ubuntuVersion = "1804"
				} else if (version.startsWith("20")) {
					ubuntuVersion = "2004"
				} else if (version.startsWith("21")) {
					ubuntuVersion = "2204"
				} else {
					// Default, should be updated with new release of LinuxMint
					ubuntuVersion = "2204"
				}
			}
			ubuntuVersion = ubuntuVersion.replaceAll("\"", "").replaceAll("\'", "").replaceAll("\\.", "").trim()

			return "ubuntu${ubuntuVersion}"
		case ~/.*Red Hat Enterprise Linux.*/:
			return "rhel${version}"
		default:
			println "Operating system is not Ubuntu, Linux Mint, or Red Hat."
			return "unsupportedOS"
	}
}

project.ext.set("overwriteArtifact", getPropertySafelyWithDefaults("refreshDownloads", "false").toBoolean())
project.ext.set("overwriteChangedFiles", getPropertySafelyWithDefaults("overwriteChangedFiles", "true").toBoolean())
project.ext.set("refreshEnv", getPropertySafelyWithDefaults("refreshEnv", "false").toBoolean())
project.ext.set("downloadGrapes", getPropertySafelyWithDefaults("downloadGrapes", "true").toBoolean())
project.ext.set("socialRequired", getPropertySafelyWithDefaults("crafter.social", "false").toBoolean()
		|| getPropertySafelyWithDefaults("socialRequired", "false").toBoolean())
project.ext.set("profileRequired", (getPropertySafelyWithDefaults("crafter.profile", "false").toBoolean()
		|| (getPropertySafelyWithDefaults("profileRequired", "false").toBoolean()
		|| socialRequired)))
project.ext.set("unitTest", getPropertySafelyWithDefaults("unitTest", "false").toBoolean())
project.ext.set("startMongoDB", getPropertySafelyWithDefaults("startMongodb", (profileRequired || socialRequired)).toBoolean())
project.ext.set("startSearch", getPropertySafelyWithDefaults("startSearch", getPropertySafelyWithDefaults("withSearch", "true")).toBoolean())
project.ext.set("startCommand", project.hasProperty("debug") ? "debug" : "start")
project.ext.set("stopCommand", "stop")
project.ext.set("statusCommand", "status")
project.ext.set("gitUrl", getPropertySafelyWithDefaults("gitUrl", "https://github.com/craftercms/"))
project.ext.set("gitRemote", getPropertySafelyWithDefaults("gitRemote", "origin"))
project.ext.set("shallowClone", getPropertySafelyWithDefaults("shallowClone", "false").toBoolean())
project.ext.set("gitBranch", "v4.1.3") // craftercms branch flag
project.ext.set("bundlesDir", getPropertySafelyWithDefaults(bundlesDir, "./bundles"))
project.ext.set("crafterCmd", getPropertySafelyWithDefaults("crafterCmd", "./crafter.sh"))
project.ext.set("currentPlatform", getPropertySafelyWithDefaults("currentPlatform", SystemUtils.IS_OS_MAC_OSX ? "darwin" : "linux"))
project.ext.set("currentArch", getPropertySafelyWithDefaults("currentArch", SystemUtils.OS_ARCH == "aarch64" ? "aarch64" : "x86_64"))
project.ext.set("openSearchPlatform", getPropertySafelyWithDefaults("openSearchPlatform", "linux"))
project.ext.set("openSearchArch", getPropertySafelyWithDefaults("openSearchArch", "x64"))
project.ext.set("mongodbPlatform", getPropertySafelyWithDefaults("mongodbPlatform", currentPlatform == "darwin" ? "osx" : currentPlatform))
project.ext.set("mongodbBinary", getPropertySafelyWithDefaults("mongodbBinary", currentPlatform == "darwin" ? "macos" : currentPlatform))
project.ext.set("mongoExtension", getPropertySafelyWithDefaults("mongoExtension", currentPlatform == "darwin" ? "zip" : "tgz"))
if (currentPlatform == "darwin") {
	project.ext.set("mongodbArch", getPropertySafelyWithDefaults("mongodbArch", currentArch == "aarch64" ? "arm64" : "x86_64"))
	project.ext.set("mongoshArch", getPropertySafelyWithDefaults("mongoshArch", currentArch == "aarch64" ? "arm64" : "x64"))
	project.ext.set("mongoToolsArch", getPropertySafelyWithDefaults("mongoToolsArch", currentArch == "aarch64" ? "macos-arm64" : "macos-x86_64"))
} else {
	project.ext.set("mongodbArch", getPropertySafelyWithDefaults("mongodbArch", "x86_64-${execDetermineLinuxOSWithVersion()}"))
	project.ext.set("mongoshArch", getPropertySafelyWithDefaults("mongoshArch", "x64"))
	project.ext.set("mongoToolsArch", getPropertySafelyWithDefaults("mongoToolsArch", "${execDetermineLinuxOSWithVersion()}-x86_64"))
}